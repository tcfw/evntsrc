// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streams.proto

/*
	Package evntsrc_streams is a generated protocol buffer package.

	It is generated from these files:
		streams.proto

	It has these top-level messages:
		Stream
		SearchRequest
		StreamList
		Empty
		GetRequest
*/
package evntsrc_streams

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Stream struct {
	ID      int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" bson:"_id"`
	Cluster string `protobuf:"bytes,2,opt,name=Cluster,proto3" json:"Cluster,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Owner   string `protobuf:"bytes,4,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Icon    string `protobuf:"bytes,5,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Color   string `protobuf:"bytes,6,opt,name=Color,proto3" json:"Color,omitempty"`
}

func (m *Stream) Reset()                    { *m = Stream{} }
func (m *Stream) String() string            { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()               {}
func (*Stream) Descriptor() ([]byte, []int) { return fileDescriptorStreams, []int{0} }

func (m *Stream) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Stream) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Stream) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stream) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Stream) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Stream) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (*Stream) XXX_MessageName() string {
	return "evntsrc.streams.Stream"
}

type SearchRequest struct {
	Query string `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptorStreams, []int{1} }

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (*SearchRequest) XXX_MessageName() string {
	return "evntsrc.streams.SearchRequest"
}

type StreamList struct {
	Streams []*Stream `protobuf:"bytes,1,rep,name=Streams" json:"Streams,omitempty"`
}

func (m *StreamList) Reset()                    { *m = StreamList{} }
func (m *StreamList) String() string            { return proto.CompactTextString(m) }
func (*StreamList) ProtoMessage()               {}
func (*StreamList) Descriptor() ([]byte, []int) { return fileDescriptorStreams, []int{2} }

func (m *StreamList) GetStreams() []*Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (*StreamList) XXX_MessageName() string {
	return "evntsrc.streams.StreamList"
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorStreams, []int{3} }

func (*Empty) XXX_MessageName() string {
	return "evntsrc.streams.Empty"
}

type GetRequest struct {
	ID int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorStreams, []int{4} }

func (m *GetRequest) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (*GetRequest) XXX_MessageName() string {
	return "evntsrc.streams.GetRequest"
}
func init() {
	proto.RegisterType((*Stream)(nil), "evntsrc.streams.Stream")
	proto.RegisterType((*SearchRequest)(nil), "evntsrc.streams.SearchRequest")
	proto.RegisterType((*StreamList)(nil), "evntsrc.streams.StreamList")
	proto.RegisterType((*Empty)(nil), "evntsrc.streams.Empty")
	proto.RegisterType((*GetRequest)(nil), "evntsrc.streams.GetRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamsService service

type StreamsServiceClient interface {
	Create(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*Stream, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*StreamList, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StreamList, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Stream, error)
}

type streamsServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamsServiceClient(cc *grpc.ClientConn) StreamsServiceClient {
	return &streamsServiceClient{cc}
}

func (c *streamsServiceClient) Create(ctx context.Context, in *Stream, opts ...grpc.CallOption) (*Stream, error) {
	out := new(Stream)
	err := grpc.Invoke(ctx, "/evntsrc.streams.StreamsService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*StreamList, error) {
	out := new(StreamList)
	err := grpc.Invoke(ctx, "/evntsrc.streams.StreamsService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StreamList, error) {
	out := new(StreamList)
	err := grpc.Invoke(ctx, "/evntsrc.streams.StreamsService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Stream, error) {
	out := new(Stream)
	err := grpc.Invoke(ctx, "/evntsrc.streams.StreamsService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StreamsService service

type StreamsServiceServer interface {
	Create(context.Context, *Stream) (*Stream, error)
	Search(context.Context, *SearchRequest) (*StreamList, error)
	List(context.Context, *Empty) (*StreamList, error)
	Get(context.Context, *GetRequest) (*Stream, error)
}

func RegisterStreamsServiceServer(s *grpc.Server, srv StreamsServiceServer) {
	s.RegisterService(&_StreamsService_serviceDesc, srv)
}

func _StreamsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streams.StreamsService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Create(ctx, req.(*Stream))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streams.StreamsService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streams.StreamsService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streams.StreamsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.streams.StreamsService",
	HandlerType: (*StreamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamsService_Create_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _StreamsService_Search_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamsService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamsService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streams.proto",
}

func (m *Stream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStreams(dAtA, i, uint64(m.ID))
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreams(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStreams(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Owner) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStreams(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStreams(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStreams(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	return i, nil
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreams(dAtA, i, uint64(len(m.Query)))
		i += copy(dAtA[i:], m.Query)
	}
	return i, nil
}

func (m *StreamList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, msg := range m.Streams {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStreams(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStreams(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func encodeVarintStreams(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Stream) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovStreams(uint64(m.ID))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovStreams(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStreams(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovStreams(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovStreams(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovStreams(uint64(l))
	}
	return n
}

func (m *SearchRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovStreams(uint64(l))
	}
	return n
}

func (m *StreamList) Size() (n int) {
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovStreams(uint64(l))
		}
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovStreams(uint64(m.ID))
	}
	return n
}

func sovStreams(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStreams(x uint64) (n int) {
	return sovStreams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreams
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, &Stream{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStreams
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStreams
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStreams(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStreams = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreams   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("streams.proto", fileDescriptorStreams) }

var fileDescriptorStreams = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x9d, 0xb4, 0x4d, 0xd9, 0xb7, 0xb4, 0x2b, 0xcf, 0x55, 0x87, 0xb8, 0xc4, 0x32, 0x20,
	0x14, 0xc1, 0x84, 0x5d, 0x6f, 0x7b, 0x11, 0xb6, 0x95, 0xa5, 0x20, 0xea, 0xa6, 0x78, 0x96, 0x34,
	0x8e, 0xd9, 0x40, 0x9b, 0xa9, 0x33, 0x93, 0xca, 0x22, 0x5e, 0xfc, 0x0a, 0x82, 0xf8, 0x71, 0x3c,
	0xf6, 0x28, 0x78, 0x17, 0x69, 0xbd, 0x0b, 0x7e, 0x02, 0xc9, 0x4c, 0x4b, 0x8b, 0x25, 0x7b, 0x7b,
	0xff, 0xf7, 0xfe, 0xef, 0x97, 0x37, 0x7f, 0x02, 0x2d, 0xa5, 0x25, 0x8f, 0x27, 0x2a, 0x98, 0x4a,
	0xa1, 0x05, 0x1e, 0xf0, 0x59, 0xae, 0x95, 0x4c, 0x82, 0x55, 0xdb, 0x7b, 0x94, 0x66, 0xfa, 0xb2,
	0x18, 0x05, 0x89, 0x98, 0x84, 0xa9, 0x48, 0x45, 0x68, 0x7c, 0xa3, 0xe2, 0xad, 0x51, 0x46, 0x98,
	0xca, 0xee, 0x7b, 0x47, 0xa9, 0x10, 0xe9, 0x98, 0x87, 0xf1, 0x34, 0x0b, 0xe3, 0x3c, 0x17, 0x3a,
	0xd6, 0x99, 0xc8, 0x57, 0x74, 0xf6, 0x85, 0x80, 0x3b, 0x34, 0x60, 0xf4, 0xc1, 0x19, 0xf4, 0x29,
	0xe9, 0x90, 0x6e, 0xe3, 0xac, 0xfd, 0xf7, 0xe7, 0x7d, 0x18, 0x29, 0x91, 0x9f, 0xb2, 0xd7, 0xd9,
	0x1b, 0x16, 0x39, 0x83, 0x3e, 0x52, 0x68, 0xf6, 0xc6, 0x85, 0xd2, 0x5c, 0x52, 0xa7, 0x43, 0xba,
	0x7b, 0xd1, 0x5a, 0x22, 0x42, 0xfd, 0x79, 0x3c, 0xe1, 0xb4, 0x66, 0xda, 0xa6, 0xc6, 0x43, 0x68,
	0xbc, 0x78, 0x9f, 0x73, 0x49, 0xeb, 0xa6, 0x69, 0x45, 0xe9, 0x1c, 0x24, 0x22, 0xa7, 0x0d, 0xeb,
	0x2c, 0xeb, 0xd2, 0xd9, 0x13, 0x63, 0x21, 0xa9, 0x6b, 0x9d, 0x46, 0xb0, 0x07, 0xd0, 0x1a, 0xf2,
	0x58, 0x26, 0x97, 0x11, 0x7f, 0x57, 0x70, 0xa5, 0x4b, 0xdb, 0x45, 0xc1, 0xe5, 0x95, 0xb9, 0x70,
	0x2f, 0xb2, 0x82, 0x3d, 0x01, 0xb0, 0xe7, 0x3f, 0xcb, 0x94, 0xc6, 0x63, 0x68, 0x5a, 0xa5, 0x28,
	0xe9, 0xd4, 0xba, 0xfb, 0x27, 0x77, 0x83, 0xff, 0xd2, 0x0b, 0xec, 0x3c, 0x5a, 0xfb, 0x58, 0x13,
	0x1a, 0x4f, 0x27, 0x53, 0x7d, 0xc5, 0x8e, 0x00, 0xce, 0xb9, 0x5e, 0x7f, 0xad, 0xbd, 0x09, 0xa3,
	0x7c, 0xfc, 0xc9, 0x1f, 0x07, 0xda, 0xab, 0x95, 0x21, 0x97, 0xb3, 0x2c, 0xe1, 0x78, 0x01, 0x6e,
	0x4f, 0xf2, 0x58, 0x73, 0xac, 0xfa, 0x8a, 0x57, 0x35, 0x60, 0xb7, 0x3f, 0xfd, 0xf8, 0xfd, 0xd9,
	0x39, 0x60, 0x10, 0xce, 0x8e, 0x43, 0x3b, 0x3b, 0x25, 0x0f, 0x31, 0x06, 0xd7, 0x3e, 0x1a, 0xfd,
	0xdd, 0xcd, 0xed, 0x34, 0xbc, 0x7b, 0x15, 0xe4, 0x32, 0x06, 0xe6, 0x19, 0xfa, 0x21, 0xe2, 0x86,
	0xae, 0x42, 0x65, 0xc1, 0x2f, 0xa1, 0x6e, 0xa2, 0xba, 0xb3, 0x03, 0x30, 0x31, 0x5c, 0x0f, 0xbe,
	0x65, 0xc0, 0x2d, 0xdc, 0xdf, 0x02, 0xe3, 0x2b, 0xa8, 0x9d, 0x73, 0x8d, 0xbb, 0x8b, 0x9b, 0x38,
	0xab, 0x83, 0xa0, 0x86, 0x88, 0x78, 0x73, 0xfb, 0xd4, 0x0f, 0x83, 0xfe, 0xc7, 0x33, 0x3a, 0x5f,
	0xf8, 0xe4, 0xfb, 0xc2, 0x27, 0xbf, 0x16, 0x3e, 0xf9, 0xba, 0xf4, 0x6f, 0x7c, 0x5b, 0xfa, 0x64,
	0xbe, 0xf4, 0xc9, 0xc8, 0x35, 0xbf, 0xee, 0xe3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xca,
	0xbc, 0x18, 0x29, 0x03, 0x00, 0x00,
}
