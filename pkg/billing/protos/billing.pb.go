// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: billing.proto

/*
	Package evntsrc_billing is a generated protocol buffer package.

	It is generated from these files:
		billing.proto

	It has these top-level messages:
		Empty
		Product
		Plan
		Subscription
		PlanList
		CreateRequest
		CreateResponse
		UserSubscriptionsRequest
		UserSubscriptionsResponse
		SubscribeRequest
		SubscribeResponse
		TerminateRequest
		InfoRequest
		Card
		Source
		Customer
*/
package evntsrc_billing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{0} }

func (*Empty) XXX_MessageName() string {
	return "evntsrc.billing.Empty"
}

// https://github.com/stripe/stripe-go/blob/master/product.go
type Product struct {
	Active      bool              `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Attributes  []string          `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	Caption     string            `protobuf:"bytes,3,opt,name=caption,proto3" json:"caption,omitempty"`
	Description string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Id          string            `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Metadata    map[string]string `protobuf:"bytes,9,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name        string            `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{1} }

func (m *Product) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Product) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Product) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (*Product) XXX_MessageName() string {
	return "evntsrc.billing.Product"
}

// https://github.com/stripe/stripe-go/blob/master/plan.go
type Plan struct {
	Active          bool              `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	AggregateUsage  string            `protobuf:"bytes,2,opt,name=aggregateUsage,proto3" json:"aggregateUsage,omitempty"`
	Amount          int64             `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	BillingScheme   string            `protobuf:"bytes,4,opt,name=billingScheme,proto3" json:"billingScheme,omitempty"`
	Currency        string            `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	Deleted         bool              `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Id              string            `protobuf:"bytes,8,opt,name=id,proto3" json:"id,omitempty"`
	Interval        string            `protobuf:"bytes,9,opt,name=interval,proto3" json:"interval,omitempty"`
	IntervalCount   int64             `protobuf:"varint,10,opt,name=intervalCount,proto3" json:"intervalCount,omitempty"`
	LiveMode        bool              `protobuf:"varint,11,opt,name=liveMode,proto3" json:"liveMode,omitempty"`
	Metadata        map[string]string `protobuf:"bytes,12,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nickname        string            `protobuf:"bytes,13,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Product         *Product          `protobuf:"bytes,14,opt,name=product" json:"product,omitempty"`
	TiresMode       string            `protobuf:"bytes,15,opt,name=tiresMode,proto3" json:"tiresMode,omitempty"`
	TrialPeriodDays int64             `protobuf:"varint,17,opt,name=trialPeriodDays,proto3" json:"trialPeriodDays,omitempty"`
	UsageType       string            `protobuf:"bytes,18,opt,name=usageType,proto3" json:"usageType,omitempty"`
}

func (m *Plan) Reset()                    { *m = Plan{} }
func (m *Plan) String() string            { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()               {}
func (*Plan) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{2} }

func (m *Plan) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Plan) GetAggregateUsage() string {
	if m != nil {
		return m.AggregateUsage
	}
	return ""
}

func (m *Plan) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Plan) GetBillingScheme() string {
	if m != nil {
		return m.BillingScheme
	}
	return ""
}

func (m *Plan) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Plan) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Plan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Plan) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *Plan) GetIntervalCount() int64 {
	if m != nil {
		return m.IntervalCount
	}
	return 0
}

func (m *Plan) GetLiveMode() bool {
	if m != nil {
		return m.LiveMode
	}
	return false
}

func (m *Plan) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Plan) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Plan) GetProduct() *Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Plan) GetTiresMode() string {
	if m != nil {
		return m.TiresMode
	}
	return ""
}

func (m *Plan) GetTrialPeriodDays() int64 {
	if m != nil {
		return m.TrialPeriodDays
	}
	return 0
}

func (m *Plan) GetUsageType() string {
	if m != nil {
		return m.UsageType
	}
	return ""
}

func (*Plan) XXX_MessageName() string {
	return "evntsrc.billing.Plan"
}

// https://github.com/stripe/stripe-go/blob/master/sub.go
type Subscription struct {
	Billing             string            `protobuf:"bytes,2,opt,name=billing,proto3" json:"billing,omitempty"`
	BillingCycleAnchor  int64             `protobuf:"varint,3,opt,name=billingCycleAnchor,proto3" json:"billingCycleAnchor,omitempty"`
	CanceledAt          int64             `protobuf:"varint,4,opt,name=canceledAt,proto3" json:"canceledAt,omitempty"`
	CreatedAt           int64             `protobuf:"varint,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CurrentPeriodEnds   int64             `protobuf:"varint,6,opt,name=currentPeriodEnds,proto3" json:"currentPeriodEnds,omitempty"`
	CurrentPeriodStarts int64             `protobuf:"varint,7,opt,name=currentPeriodStarts,proto3" json:"currentPeriodStarts,omitempty"`
	DaysUntilDue        int64             `protobuf:"varint,9,opt,name=daysUntilDue,proto3" json:"daysUntilDue,omitempty"`
	CancelAtPeriodEnd   bool              `protobuf:"varint,11,opt,name=cancelAtPeriodEnd,proto3" json:"cancelAtPeriodEnd,omitempty"`
	EndedAt             int64             `protobuf:"varint,12,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	Id                  string            `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	Metadata            map[string]string `protobuf:"bytes,15,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Plan                string            `protobuf:"bytes,17,opt,name=plan,proto3" json:"plan,omitempty"`
	Start               int64             `protobuf:"varint,19,opt,name=start,proto3" json:"start,omitempty"`
	Status              string            `protobuf:"bytes,20,opt,name=status,proto3" json:"status,omitempty"`
	TaxPercent          float64           `protobuf:"fixed64,21,opt,name=taxPercent,proto3" json:"taxPercent,omitempty"`
	TrialEnds           int64             `protobuf:"varint,22,opt,name=trialEnds,proto3" json:"trialEnds,omitempty"`
	TrialStarts         int64             `protobuf:"varint,23,opt,name=trialStarts,proto3" json:"trialStarts,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{3} }

func (m *Subscription) GetBilling() string {
	if m != nil {
		return m.Billing
	}
	return ""
}

func (m *Subscription) GetBillingCycleAnchor() int64 {
	if m != nil {
		return m.BillingCycleAnchor
	}
	return 0
}

func (m *Subscription) GetCanceledAt() int64 {
	if m != nil {
		return m.CanceledAt
	}
	return 0
}

func (m *Subscription) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Subscription) GetCurrentPeriodEnds() int64 {
	if m != nil {
		return m.CurrentPeriodEnds
	}
	return 0
}

func (m *Subscription) GetCurrentPeriodStarts() int64 {
	if m != nil {
		return m.CurrentPeriodStarts
	}
	return 0
}

func (m *Subscription) GetDaysUntilDue() int64 {
	if m != nil {
		return m.DaysUntilDue
	}
	return 0
}

func (m *Subscription) GetCancelAtPeriodEnd() bool {
	if m != nil {
		return m.CancelAtPeriodEnd
	}
	return false
}

func (m *Subscription) GetEndedAt() int64 {
	if m != nil {
		return m.EndedAt
	}
	return 0
}

func (m *Subscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subscription) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Subscription) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

func (m *Subscription) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Subscription) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Subscription) GetTaxPercent() float64 {
	if m != nil {
		return m.TaxPercent
	}
	return 0
}

func (m *Subscription) GetTrialEnds() int64 {
	if m != nil {
		return m.TrialEnds
	}
	return 0
}

func (m *Subscription) GetTrialStarts() int64 {
	if m != nil {
		return m.TrialStarts
	}
	return 0
}

func (*Subscription) XXX_MessageName() string {
	return "evntsrc.billing.Subscription"
}

type PlanList struct {
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans" json:"plans,omitempty"`
}

func (m *PlanList) Reset()                    { *m = PlanList{} }
func (m *PlanList) String() string            { return proto.CompactTextString(m) }
func (*PlanList) ProtoMessage()               {}
func (*PlanList) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{4} }

func (m *PlanList) GetPlans() []*Plan {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (*PlanList) XXX_MessageName() string {
	return "evntsrc.billing.PlanList"
}

type CreateRequest struct {
	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CardToken string `protobuf:"bytes,2,opt,name=cardToken,proto3" json:"cardToken,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{5} }

func (m *CreateRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateRequest) GetCardToken() string {
	if m != nil {
		return m.CardToken
	}
	return ""
}

func (*CreateRequest) XXX_MessageName() string {
	return "evntsrc.billing.CreateRequest"
}

type CreateResponse struct {
	CustomerId string `protobuf:"bytes,1,opt,name=customerId,proto3" json:"customerId,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{6} }

func (m *CreateResponse) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (*CreateResponse) XXX_MessageName() string {
	return "evntsrc.billing.CreateResponse"
}

type UserSubscriptionsRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *UserSubscriptionsRequest) Reset()                    { *m = UserSubscriptionsRequest{} }
func (m *UserSubscriptionsRequest) String() string            { return proto.CompactTextString(m) }
func (*UserSubscriptionsRequest) ProtoMessage()               {}
func (*UserSubscriptionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{7} }

func (m *UserSubscriptionsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (*UserSubscriptionsRequest) XXX_MessageName() string {
	return "evntsrc.billing.UserSubscriptionsRequest"
}

type UserSubscriptionsResponse struct {
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
}

func (m *UserSubscriptionsResponse) Reset()                    { *m = UserSubscriptionsResponse{} }
func (m *UserSubscriptionsResponse) String() string            { return proto.CompactTextString(m) }
func (*UserSubscriptionsResponse) ProtoMessage()               {}
func (*UserSubscriptionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{8} }

func (m *UserSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (*UserSubscriptionsResponse) XXX_MessageName() string {
	return "evntsrc.billing.UserSubscriptionsResponse"
}

type SubscribeRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PlanId string `protobuf:"bytes,2,opt,name=planId,proto3" json:"planId,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{9} }

func (m *SubscribeRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *SubscribeRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (*SubscribeRequest) XXX_MessageName() string {
	return "evntsrc.billing.SubscribeRequest"
}

type SubscribeResponse struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscriptionId,proto3" json:"subscriptionId,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{10} }

func (m *SubscribeResponse) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (*SubscribeResponse) XXX_MessageName() string {
	return "evntsrc.billing.SubscribeResponse"
}

type TerminateRequest struct {
	PlanId string `protobuf:"bytes,1,opt,name=planId,proto3" json:"planId,omitempty"`
}

func (m *TerminateRequest) Reset()                    { *m = TerminateRequest{} }
func (m *TerminateRequest) String() string            { return proto.CompactTextString(m) }
func (*TerminateRequest) ProtoMessage()               {}
func (*TerminateRequest) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{11} }

func (m *TerminateRequest) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (*TerminateRequest) XXX_MessageName() string {
	return "evntsrc.billing.TerminateRequest"
}

type InfoRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{12} }

func (m *InfoRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (*InfoRequest) XXX_MessageName() string {
	return "evntsrc.billing.InfoRequest"
}

// https://github.com/stripe/stripe-go/blob/master/card.go
type Card struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Brand    string `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
	Country  string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	ExpMonth uint32 `protobuf:"varint,4,opt,name=expMonth,proto3" json:"expMonth,omitempty"`
	ExpYear  uint32 `protobuf:"varint,5,opt,name=expYear,proto3" json:"expYear,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Number   string `protobuf:"bytes,7,opt,name=number,proto3" json:"number,omitempty"`
	CvcCheck string `protobuf:"bytes,8,opt,name=cvcCheck,proto3" json:"cvcCheck,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{13} }

func (m *Card) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Card) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Card) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Card) GetExpMonth() uint32 {
	if m != nil {
		return m.ExpMonth
	}
	return 0
}

func (m *Card) GetExpYear() uint32 {
	if m != nil {
		return m.ExpYear
	}
	return 0
}

func (m *Card) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Card) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Card) GetCvcCheck() string {
	if m != nil {
		return m.CvcCheck
	}
	return ""
}

func (*Card) XXX_MessageName() string {
	return "evntsrc.billing.Card"
}

// https://github.com/stripe/stripe-go/blob/master/source.go
type Source struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Source:
	//	*Source_Card
	Source isSource_Source `protobuf_oneof:"source"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{14} }

type isSource_Source interface {
	isSource_Source()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Source_Card struct {
	Card *Card `protobuf:"bytes,3,opt,name=card,oneof"`
}

func (*Source_Card) isSource_Source() {}

func (m *Source) GetSource() isSource_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Source) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Source) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Source) GetCard() *Card {
	if x, ok := m.GetSource().(*Source_Card); ok {
		return x.Card
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_Card)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_Card:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Card); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Source has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 3: // source.card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Card)
		err := b.DecodeMessage(msg)
		m.Source = &Source_Card{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// source
	switch x := m.Source.(type) {
	case *Source_Card:
		s := proto.Size(x.Card)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Source) XXX_MessageName() string {
	return "evntsrc.billing.Source"
}

// https://github.com/stripe/stripe-go/blob/master/customer.go
type Customer struct {
	AccountBalance      int64             `protobuf:"varint,1,opt,name=accountBalance,proto3" json:"accountBalance,omitempty"`
	Created             int64             `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	Currency            string            `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	Deleted             bool              `protobuf:"varint,5,opt,name=deleted,proto3" json:"deleted,omitempty"`
	Delinquent          bool              `protobuf:"varint,6,opt,name=delinquent,proto3" json:"delinquent,omitempty"`
	Description         string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Email               string            `protobuf:"bytes,9,opt,name=email,proto3" json:"email,omitempty"`
	Id                  string            `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	InvoicePrefix       string            `protobuf:"bytes,11,opt,name=invoicePrefix,proto3" json:"invoicePrefix,omitempty"`
	LiveMode            bool              `protobuf:"varint,12,opt,name=liveMode,proto3" json:"liveMode,omitempty"`
	Metadata            map[string]string `protobuf:"bytes,13,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sources             []*Source         `protobuf:"bytes,15,rep,name=sources" json:"sources,omitempty"`
	Subscriptions       []*Subscription   `protobuf:"bytes,16,rep,name=subscriptions" json:"subscriptions,omitempty"`
	TaxInfo             string            `protobuf:"bytes,17,opt,name=taxInfo,proto3" json:"taxInfo,omitempty"`
	TaxInfoVerification string            `protobuf:"bytes,18,opt,name=taxInfoVerification,proto3" json:"taxInfoVerification,omitempty"`
}

func (m *Customer) Reset()                    { *m = Customer{} }
func (m *Customer) String() string            { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()               {}
func (*Customer) Descriptor() ([]byte, []int) { return fileDescriptorBilling, []int{15} }

func (m *Customer) GetAccountBalance() int64 {
	if m != nil {
		return m.AccountBalance
	}
	return 0
}

func (m *Customer) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Customer) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Customer) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Customer) GetDelinquent() bool {
	if m != nil {
		return m.Delinquent
	}
	return false
}

func (m *Customer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Customer) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Customer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Customer) GetInvoicePrefix() string {
	if m != nil {
		return m.InvoicePrefix
	}
	return ""
}

func (m *Customer) GetLiveMode() bool {
	if m != nil {
		return m.LiveMode
	}
	return false
}

func (m *Customer) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Customer) GetSources() []*Source {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *Customer) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *Customer) GetTaxInfo() string {
	if m != nil {
		return m.TaxInfo
	}
	return ""
}

func (m *Customer) GetTaxInfoVerification() string {
	if m != nil {
		return m.TaxInfoVerification
	}
	return ""
}

func (*Customer) XXX_MessageName() string {
	return "evntsrc.billing.Customer"
}
func init() {
	proto.RegisterType((*Empty)(nil), "evntsrc.billing.Empty")
	proto.RegisterType((*Product)(nil), "evntsrc.billing.Product")
	proto.RegisterType((*Plan)(nil), "evntsrc.billing.Plan")
	proto.RegisterType((*Subscription)(nil), "evntsrc.billing.Subscription")
	proto.RegisterType((*PlanList)(nil), "evntsrc.billing.PlanList")
	proto.RegisterType((*CreateRequest)(nil), "evntsrc.billing.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "evntsrc.billing.CreateResponse")
	proto.RegisterType((*UserSubscriptionsRequest)(nil), "evntsrc.billing.UserSubscriptionsRequest")
	proto.RegisterType((*UserSubscriptionsResponse)(nil), "evntsrc.billing.UserSubscriptionsResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "evntsrc.billing.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "evntsrc.billing.SubscribeResponse")
	proto.RegisterType((*TerminateRequest)(nil), "evntsrc.billing.TerminateRequest")
	proto.RegisterType((*InfoRequest)(nil), "evntsrc.billing.InfoRequest")
	proto.RegisterType((*Card)(nil), "evntsrc.billing.Card")
	proto.RegisterType((*Source)(nil), "evntsrc.billing.Source")
	proto.RegisterType((*Customer)(nil), "evntsrc.billing.Customer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BillingService service

type BillingServiceClient interface {
	GetPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlanList, error)
	CreateCustomerFromUser(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetUserInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Customer, error)
	GetUserSubscriptions(ctx context.Context, in *UserSubscriptionsRequest, opts ...grpc.CallOption) (*UserSubscriptionsResponse, error)
	SubscribeUser(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	TerminateSubscription(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*Empty, error)
}

type billingServiceClient struct {
	cc *grpc.ClientConn
}

func NewBillingServiceClient(cc *grpc.ClientConn) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PlanList, error) {
	out := new(PlanList)
	err := grpc.Invoke(ctx, "/evntsrc.billing.BillingService/GetPlans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateCustomerFromUser(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/evntsrc.billing.BillingService/CreateCustomerFromUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetUserInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := grpc.Invoke(ctx, "/evntsrc.billing.BillingService/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetUserSubscriptions(ctx context.Context, in *UserSubscriptionsRequest, opts ...grpc.CallOption) (*UserSubscriptionsResponse, error) {
	out := new(UserSubscriptionsResponse)
	err := grpc.Invoke(ctx, "/evntsrc.billing.BillingService/GetUserSubscriptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SubscribeUser(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/evntsrc.billing.BillingService/SubscribeUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) TerminateSubscription(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/evntsrc.billing.BillingService/TerminateSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BillingService service

type BillingServiceServer interface {
	GetPlans(context.Context, *Empty) (*PlanList, error)
	CreateCustomerFromUser(context.Context, *CreateRequest) (*CreateResponse, error)
	GetUserInfo(context.Context, *InfoRequest) (*Customer, error)
	GetUserSubscriptions(context.Context, *UserSubscriptionsRequest) (*UserSubscriptionsResponse, error)
	SubscribeUser(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	TerminateSubscription(context.Context, *TerminateRequest) (*Empty, error)
}

func RegisterBillingServiceServer(s *grpc.Server, srv BillingServiceServer) {
	s.RegisterService(&_BillingService_serviceDesc, srv)
}

func _BillingService_GetPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.billing.BillingService/GetPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateCustomerFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateCustomerFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.billing.BillingService/CreateCustomerFromUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateCustomerFromUser(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.billing.BillingService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetUserInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetUserSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetUserSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.billing.BillingService/GetUserSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetUserSubscriptions(ctx, req.(*UserSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SubscribeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SubscribeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.billing.BillingService/SubscribeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SubscribeUser(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_TerminateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).TerminateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.billing.BillingService/TerminateSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).TerminateSubscription(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.billing.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlans",
			Handler:    _BillingService_GetPlans_Handler,
		},
		{
			MethodName: "CreateCustomerFromUser",
			Handler:    _BillingService_CreateCustomerFromUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _BillingService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserSubscriptions",
			Handler:    _BillingService_GetUserSubscriptions_Handler,
		},
		{
			MethodName: "SubscribeUser",
			Handler:    _BillingService_SubscribeUser_Handler,
		},
		{
			MethodName: "TerminateSubscription",
			Handler:    _BillingService_TerminateSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Active {
		dAtA[i] = 0x8
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Caption) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Caption)))
		i += copy(dAtA[i:], m.Caption)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x4a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			i = encodeVarintBilling(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Active {
		dAtA[i] = 0x8
		i++
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AggregateUsage) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.AggregateUsage)))
		i += copy(dAtA[i:], m.AggregateUsage)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.Amount))
	}
	if len(m.BillingScheme) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.BillingScheme)))
		i += copy(dAtA[i:], m.BillingScheme)
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if m.Deleted {
		dAtA[i] = 0x38
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Interval) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Interval)))
		i += copy(dAtA[i:], m.Interval)
	}
	if m.IntervalCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.IntervalCount))
	}
	if m.LiveMode {
		dAtA[i] = 0x58
		i++
		if m.LiveMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x62
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			i = encodeVarintBilling(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Product != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.Product.Size()))
		n1, err := m.Product.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.TiresMode) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.TiresMode)))
		i += copy(dAtA[i:], m.TiresMode)
	}
	if m.TrialPeriodDays != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.TrialPeriodDays))
	}
	if len(m.UsageType) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.UsageType)))
		i += copy(dAtA[i:], m.UsageType)
	}
	return i, nil
}

func (m *Subscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Billing) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Billing)))
		i += copy(dAtA[i:], m.Billing)
	}
	if m.BillingCycleAnchor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.BillingCycleAnchor))
	}
	if m.CanceledAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.CanceledAt))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.CreatedAt))
	}
	if m.CurrentPeriodEnds != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.CurrentPeriodEnds))
	}
	if m.CurrentPeriodStarts != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.CurrentPeriodStarts))
	}
	if m.DaysUntilDue != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.DaysUntilDue))
	}
	if m.CancelAtPeriodEnd {
		dAtA[i] = 0x58
		i++
		if m.CancelAtPeriodEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EndedAt != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.EndedAt))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x7a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			i = encodeVarintBilling(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Plan) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Plan)))
		i += copy(dAtA[i:], m.Plan)
	}
	if m.Start != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.Start))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if m.TaxPercent != 0 {
		dAtA[i] = 0xa9
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TaxPercent))))
		i += 8
	}
	if m.TrialEnds != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.TrialEnds))
	}
	if m.TrialStarts != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.TrialStarts))
	}
	return i, nil
}

func (m *PlanList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlanList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Plans) > 0 {
		for _, msg := range m.Plans {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBilling(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.CardToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CardToken)))
		i += copy(dAtA[i:], m.CardToken)
	}
	return i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	return i, nil
}

func (m *UserSubscriptionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSubscriptionsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *UserSubscriptionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSubscriptionsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBilling(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.PlanId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PlanId)))
		i += copy(dAtA[i:], m.PlanId)
	}
	return i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.SubscriptionId)))
		i += copy(dAtA[i:], m.SubscriptionId)
	}
	return i, nil
}

func (m *TerminateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlanId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PlanId)))
		i += copy(dAtA[i:], m.PlanId)
	}
	return i, nil
}

func (m *InfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *Card) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Brand) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Brand)))
		i += copy(dAtA[i:], m.Brand)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if m.ExpMonth != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.ExpMonth))
	}
	if m.ExpYear != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.ExpYear))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Number) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	if len(m.CvcCheck) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CvcCheck)))
		i += copy(dAtA[i:], m.CvcCheck)
	}
	return i, nil
}

func (m *Source) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Source) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Source != nil {
		nn2, err := m.Source.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Source_Card) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Card != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.Card.Size()))
		n3, err := m.Card.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Customer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Customer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AccountBalance != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.AccountBalance))
	}
	if m.Created != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBilling(dAtA, i, uint64(m.Created))
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if m.Deleted {
		dAtA[i] = 0x28
		i++
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Delinquent {
		dAtA[i] = 0x30
		i++
		if m.Delinquent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.InvoicePrefix) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.InvoicePrefix)))
		i += copy(dAtA[i:], m.InvoicePrefix)
	}
	if m.LiveMode {
		dAtA[i] = 0x60
		i++
		if m.LiveMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x6a
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			i = encodeVarintBilling(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintBilling(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Sources) > 0 {
		for _, msg := range m.Sources {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintBilling(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBilling(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TaxInfo) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.TaxInfo)))
		i += copy(dAtA[i:], m.TaxInfo)
	}
	if len(m.TaxInfoVerification) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBilling(dAtA, i, uint64(len(m.TaxInfoVerification)))
		i += copy(dAtA[i:], m.TaxInfoVerification)
	}
	return i, nil
}

func encodeVarintBilling(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Product) Size() (n int) {
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	if len(m.Attributes) > 0 {
		for _, s := range m.Attributes {
			l = len(s)
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	l = len(m.Caption)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			n += mapEntrySize + 1 + sovBilling(uint64(mapEntrySize))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *Plan) Size() (n int) {
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	l = len(m.AggregateUsage)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovBilling(uint64(m.Amount))
	}
	l = len(m.BillingScheme)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Interval)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.IntervalCount != 0 {
		n += 1 + sovBilling(uint64(m.IntervalCount))
	}
	if m.LiveMode {
		n += 2
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			n += mapEntrySize + 1 + sovBilling(uint64(mapEntrySize))
		}
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Product != nil {
		l = m.Product.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.TiresMode)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.TrialPeriodDays != 0 {
		n += 2 + sovBilling(uint64(m.TrialPeriodDays))
	}
	l = len(m.UsageType)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *Subscription) Size() (n int) {
	var l int
	_ = l
	l = len(m.Billing)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.BillingCycleAnchor != 0 {
		n += 1 + sovBilling(uint64(m.BillingCycleAnchor))
	}
	if m.CanceledAt != 0 {
		n += 1 + sovBilling(uint64(m.CanceledAt))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBilling(uint64(m.CreatedAt))
	}
	if m.CurrentPeriodEnds != 0 {
		n += 1 + sovBilling(uint64(m.CurrentPeriodEnds))
	}
	if m.CurrentPeriodStarts != 0 {
		n += 1 + sovBilling(uint64(m.CurrentPeriodStarts))
	}
	if m.DaysUntilDue != 0 {
		n += 1 + sovBilling(uint64(m.DaysUntilDue))
	}
	if m.CancelAtPeriodEnd {
		n += 2
	}
	if m.EndedAt != 0 {
		n += 1 + sovBilling(uint64(m.EndedAt))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			n += mapEntrySize + 1 + sovBilling(uint64(mapEntrySize))
		}
	}
	l = len(m.Plan)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.Start != 0 {
		n += 2 + sovBilling(uint64(m.Start))
	}
	l = len(m.Status)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.TaxPercent != 0 {
		n += 10
	}
	if m.TrialEnds != 0 {
		n += 2 + sovBilling(uint64(m.TrialEnds))
	}
	if m.TrialStarts != 0 {
		n += 2 + sovBilling(uint64(m.TrialStarts))
	}
	return n
}

func (m *PlanList) Size() (n int) {
	var l int
	_ = l
	if len(m.Plans) > 0 {
		for _, e := range m.Plans {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CardToken)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *UserSubscriptionsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *UserSubscriptionsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *SubscribeResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *TerminateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *InfoRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *Card) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Brand)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.ExpMonth != 0 {
		n += 1 + sovBilling(uint64(m.ExpMonth))
	}
	if m.ExpYear != 0 {
		n += 1 + sovBilling(uint64(m.ExpYear))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CvcCheck)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *Source) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Source != nil {
		n += m.Source.Size()
	}
	return n
}

func (m *Source_Card) Size() (n int) {
	var l int
	_ = l
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}
func (m *Customer) Size() (n int) {
	var l int
	_ = l
	if m.AccountBalance != 0 {
		n += 1 + sovBilling(uint64(m.AccountBalance))
	}
	if m.Created != 0 {
		n += 1 + sovBilling(uint64(m.Created))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Deleted {
		n += 2
	}
	if m.Delinquent {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.InvoicePrefix)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.LiveMode {
		n += 2
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovBilling(uint64(len(k))) + 1 + len(v) + sovBilling(uint64(len(v)))
			n += mapEntrySize + 1 + sovBilling(uint64(mapEntrySize))
		}
	}
	if len(m.Sources) > 0 {
		for _, e := range m.Sources {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 2 + l + sovBilling(uint64(l))
		}
	}
	l = len(m.TaxInfo)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	l = len(m.TaxInfoVerification)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	return n
}

func sovBilling(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBilling(x uint64) (n int) {
	return sovBilling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBilling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBilling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBilling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateUsage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateUsage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingScheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingScheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalCount", wireType)
			}
			m.IntervalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveMode = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBilling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBilling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBilling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Product == nil {
				m.Product = &Product{}
			}
			if err := m.Product.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TiresMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TiresMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialPeriodDays", wireType)
			}
			m.TrialPeriodDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrialPeriodDays |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Subscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Billing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingCycleAnchor", wireType)
			}
			m.BillingCycleAnchor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BillingCycleAnchor |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanceledAt", wireType)
			}
			m.CanceledAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CanceledAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPeriodEnds", wireType)
			}
			m.CurrentPeriodEnds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPeriodEnds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPeriodStarts", wireType)
			}
			m.CurrentPeriodStarts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPeriodStarts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaysUntilDue", wireType)
			}
			m.DaysUntilDue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DaysUntilDue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelAtPeriodEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CancelAtPeriodEnd = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndedAt", wireType)
			}
			m.EndedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBilling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBilling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBilling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TaxPercent = float64(math.Float64frombits(v))
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialEnds", wireType)
			}
			m.TrialEnds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrialEnds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialStarts", wireType)
			}
			m.TrialStarts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrialStarts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlanList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plans = append(m.Plans, &Plan{})
			if err := m.Plans[len(m.Plans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSubscriptionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSubscriptionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSubscriptionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSubscriptionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSubscriptionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSubscriptionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &Subscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Card: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Card: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpMonth", wireType)
			}
			m.ExpMonth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpMonth |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpYear", wireType)
			}
			m.ExpYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpYear |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CvcCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CvcCheck = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Source) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Source: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Source: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Card{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Source = &Source_Card{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Customer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Customer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Customer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountBalance", wireType)
			}
			m.AccountBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountBalance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delinquent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Delinquent = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoicePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoicePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiveMode = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBilling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBilling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthBilling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBilling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBilling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, &Source{})
			if err := m.Sources[len(m.Sources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &Subscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxInfoVerification", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxInfoVerification = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBilling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBilling
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBilling
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBilling(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBilling = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBilling   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("billing.proto", fileDescriptorBilling) }

var fileDescriptorBilling = []byte{
	// 1483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x73, 0xdb, 0x54,
	0x10, 0xaf, 0x6c, 0xd9, 0x96, 0xd7, 0xb1, 0xa3, 0xbc, 0xa4, 0xa9, 0x62, 0x8a, 0x49, 0x05, 0xb4,
	0xa1, 0x85, 0xa4, 0x0d, 0x07, 0x98, 0xf6, 0xc0, 0x34, 0x6e, 0x28, 0xcd, 0xd0, 0x99, 0x8c, 0xd2,
	0x76, 0xe0, 0xc6, 0xb3, 0xf4, 0xe2, 0x68, 0x22, 0x4b, 0xee, 0xd3, 0x93, 0x27, 0x1e, 0x86, 0x4b,
	0x87, 0x6f, 0xc0, 0x85, 0xcf, 0xc2, 0x81, 0xe1, 0xc0, 0xa1, 0x47, 0x66, 0xf8, 0x02, 0x4c, 0xcb,
	0x81, 0x2f, 0xc0, 0x9d, 0x79, 0xab, 0x27, 0x45, 0xfe, 0xd7, 0xc2, 0x94, 0xdb, 0xdb, 0xdd, 0xa7,
	0xdd, 0x7d, 0xbb, 0xbf, 0xfd, 0x23, 0x68, 0xf6, 0xfc, 0x20, 0xf0, 0xc3, 0xfe, 0xf6, 0x90, 0x47,
	0x22, 0x22, 0xcb, 0x6c, 0x14, 0x8a, 0x98, 0xbb, 0xdb, 0x8a, 0xdd, 0xfe, 0xa8, 0xef, 0x8b, 0x93,
	0xa4, 0xb7, 0xed, 0x46, 0x83, 0x9d, 0x7e, 0xd4, 0x8f, 0x76, 0xf0, 0x5e, 0x2f, 0x39, 0x46, 0x0a,
	0x09, 0x3c, 0xa5, 0xdf, 0xb7, 0x2f, 0xf7, 0xa3, 0xa8, 0x1f, 0xb0, 0x1d, 0x3a, 0xf4, 0x77, 0x68,
	0x18, 0x46, 0x82, 0x0a, 0x3f, 0x0a, 0xe3, 0x54, 0x6a, 0xd7, 0xa0, 0xb2, 0x3f, 0x18, 0x8a, 0xb1,
	0xfd, 0x53, 0x09, 0x6a, 0x87, 0x3c, 0xf2, 0x12, 0x57, 0x90, 0x75, 0xa8, 0x52, 0x57, 0xf8, 0x23,
	0x66, 0x69, 0x9b, 0xda, 0x96, 0xe1, 0x28, 0x8a, 0x74, 0x00, 0xa8, 0x10, 0xdc, 0xef, 0x25, 0x82,
	0xc5, 0x56, 0x69, 0xb3, 0xbc, 0x55, 0x77, 0x0a, 0x1c, 0x62, 0x41, 0xcd, 0xa5, 0x43, 0xa9, 0xde,
	0x2a, 0x6f, 0x6a, 0x5b, 0x75, 0x27, 0x23, 0xc9, 0x26, 0x34, 0x3c, 0x16, 0xbb, 0xdc, 0x4f, 0xa5,
	0x55, 0x94, 0x16, 0x59, 0xa4, 0x05, 0x25, 0xdf, 0xb3, 0x6a, 0x28, 0x28, 0xf9, 0x1e, 0xd9, 0x03,
	0x63, 0xc0, 0x04, 0xf5, 0xa8, 0xa0, 0x56, 0x7d, 0xb3, 0xbc, 0xd5, 0xd8, 0xbd, 0xba, 0x3d, 0x15,
	0x89, 0x6d, 0xe5, 0xef, 0xf6, 0x43, 0x75, 0x71, 0x3f, 0x14, 0x7c, 0xec, 0xe4, 0xdf, 0x11, 0x02,
	0x7a, 0x48, 0x07, 0xcc, 0x02, 0xd4, 0x8a, 0xe7, 0xf6, 0x1d, 0x68, 0x4e, 0x5c, 0x27, 0x26, 0x94,
	0x4f, 0xd9, 0x18, 0x5f, 0x5a, 0x77, 0xe4, 0x91, 0xac, 0x41, 0x65, 0x44, 0x83, 0x84, 0x59, 0x25,
	0xe4, 0xa5, 0xc4, 0xed, 0xd2, 0xa7, 0xda, 0x81, 0x6e, 0xe8, 0x66, 0xe5, 0x40, 0x37, 0x2a, 0x66,
	0xf5, 0x40, 0x37, 0x0c, 0xb3, 0x7e, 0xa0, 0x1b, 0x0d, 0xd3, 0xb4, 0xff, 0xd2, 0x41, 0x3f, 0x0c,
	0x68, 0xb8, 0x30, 0x72, 0x57, 0xa1, 0x45, 0xfb, 0x7d, 0xce, 0xfa, 0x54, 0xb0, 0xc7, 0x31, 0xed,
	0x67, 0xba, 0xa7, 0xb8, 0xf8, 0xfd, 0x20, 0x4a, 0x42, 0x81, 0x01, 0x2c, 0x3b, 0x8a, 0x22, 0xef,
	0xe5, 0xa8, 0x38, 0x72, 0x4f, 0xd8, 0x80, 0x59, 0x3a, 0x7e, 0x3e, 0xc9, 0x24, 0x6d, 0x30, 0xdc,
	0x84, 0x73, 0x16, 0xba, 0x63, 0x15, 0xe2, 0x9c, 0x96, 0xb9, 0xf1, 0x58, 0xc0, 0x04, 0x4b, 0x83,
	0x6c, 0x38, 0x19, 0xa9, 0x22, 0x6f, 0xe4, 0x91, 0x6f, 0x83, 0xe1, 0x87, 0x82, 0xf1, 0x11, 0x0d,
	0xac, 0x7a, 0xaa, 0x25, 0xa3, 0xa5, 0x1f, 0xd9, 0xb9, 0x8b, 0x6e, 0x02, 0xba, 0x39, 0xc9, 0x94,
	0x1a, 0x02, 0x7f, 0xc4, 0x1e, 0x46, 0x1e, 0xb3, 0x1a, 0x68, 0x2c, 0xa7, 0xc9, 0x67, 0x85, 0xbc,
	0x2e, 0x61, 0x5e, 0xdf, 0x9d, 0xcd, 0x6b, 0x40, 0xc3, 0x85, 0x49, 0x6d, 0x83, 0x11, 0xfa, 0xee,
	0x29, 0x26, 0xb6, 0x99, 0xba, 0x97, 0xd1, 0x64, 0x17, 0x6a, 0xc3, 0x14, 0x13, 0x56, 0x6b, 0x53,
	0xdb, 0x6a, 0xec, 0x5a, 0x8b, 0x30, 0xe3, 0x64, 0x17, 0xc9, 0x65, 0xa8, 0x0b, 0x9f, 0xb3, 0x18,
	0xbd, 0x5d, 0x46, 0x85, 0xe7, 0x0c, 0xb2, 0x05, 0xcb, 0x82, 0xfb, 0x34, 0x38, 0x64, 0xdc, 0x8f,
	0xbc, 0x7b, 0x74, 0x1c, 0x5b, 0x2b, 0xf8, 0xe4, 0x69, 0xb6, 0xd4, 0x93, 0xc8, 0x1c, 0x3e, 0x1a,
	0x0f, 0x99, 0x45, 0x52, 0x3d, 0x39, 0xe3, 0x4d, 0x61, 0x97, 0x02, 0xce, 0x34, 0x57, 0xec, 0x9f,
	0x2b, 0xb0, 0x74, 0x94, 0xf4, 0xce, 0x0b, 0xc7, 0x82, 0x9a, 0x7a, 0x9b, 0xfa, 0x30, 0x23, 0xc9,
	0x36, 0x10, 0x75, 0xec, 0x8e, 0xdd, 0x80, 0xdd, 0x0d, 0xdd, 0x93, 0x88, 0x2b, 0x60, 0xcd, 0x91,
	0xc8, 0xf2, 0x76, 0x69, 0xe8, 0xb2, 0x80, 0x79, 0x77, 0x05, 0x22, 0xac, 0xec, 0x14, 0x38, 0xf2,
	0x85, 0x2e, 0x67, 0x54, 0xa0, 0xb8, 0x82, 0xe2, 0x73, 0x06, 0xf9, 0x10, 0x56, 0x52, 0xb0, 0x89,
	0x34, 0x28, 0xfb, 0xa1, 0x17, 0x23, 0x0a, 0xcb, 0xce, 0xac, 0x80, 0xdc, 0x84, 0xd5, 0x09, 0xe6,
	0x91, 0xa0, 0x5c, 0xc4, 0x08, 0xcd, 0xb2, 0x33, 0x4f, 0x44, 0x6c, 0x58, 0xf2, 0xe8, 0x38, 0x7e,
	0x1c, 0x0a, 0x3f, 0xb8, 0x97, 0x30, 0x84, 0x66, 0xd9, 0x99, 0xe0, 0xa1, 0x0f, 0xe8, 0xef, 0xdd,
	0x73, 0x5b, 0x0a, 0x81, 0xb3, 0x02, 0x19, 0x39, 0x16, 0x7a, 0xf8, 0x9a, 0x25, 0x54, 0x96, 0x91,
	0xaa, 0x24, 0x9a, 0x79, 0x49, 0xdc, 0x2f, 0x80, 0x76, 0x19, 0x41, 0x7b, 0x63, 0x06, 0x58, 0xc5,
	0xa4, 0xbc, 0xaa, 0x23, 0x0d, 0x03, 0x1a, 0x22, 0x86, 0xea, 0x0e, 0x9e, 0x65, 0xde, 0x63, 0xf9,
	0x44, 0x6b, 0x15, 0x9d, 0x48, 0x09, 0xd9, 0x09, 0x62, 0x41, 0x45, 0x12, 0x5b, 0x6b, 0x78, 0x57,
	0x51, 0x32, 0x49, 0x82, 0x9e, 0x1d, 0x32, 0xee, 0xb2, 0x50, 0x58, 0x17, 0x37, 0xb5, 0x2d, 0xcd,
	0x29, 0x70, 0x10, 0xce, 0x12, 0x99, 0x18, 0xfe, 0xf5, 0x34, 0x49, 0x39, 0x43, 0xf6, 0x61, 0x24,
	0x54, 0xb8, 0x2f, 0xa1, 0xbc, 0xc8, 0x7a, 0x53, 0xa0, 0x6a, 0x66, 0x29, 0xef, 0x8c, 0x60, 0x36,
	0x0e, 0x74, 0xa3, 0x65, 0x2e, 0xa7, 0xd0, 0x3d, 0xd0, 0x0d, 0x62, 0xae, 0xda, 0x9f, 0x80, 0x21,
	0xeb, 0xfb, 0x4b, 0x3f, 0x16, 0xe4, 0x06, 0x54, 0x64, 0x08, 0x62, 0x4b, 0xc3, 0xa0, 0x5e, 0x9c,
	0xdb, 0x09, 0x9c, 0xf4, 0x8e, 0xbd, 0x0f, 0xcd, 0x2e, 0xa2, 0xcd, 0x61, 0x4f, 0x13, 0x16, 0x63,
	0x88, 0x92, 0x98, 0xf1, 0x07, 0x9e, 0x72, 0x4e, 0x51, 0x88, 0x53, 0xca, 0xbd, 0x47, 0xd1, 0x29,
	0x0b, 0x95, 0x8f, 0xe7, 0x0c, 0xfb, 0x26, 0xb4, 0x32, 0x35, 0xf1, 0x30, 0x0a, 0x63, 0x1c, 0x6b,
	0x6e, 0x12, 0x8b, 0x68, 0x50, 0xd0, 0x55, 0xe0, 0xd8, 0xbb, 0x60, 0x3d, 0x8e, 0x19, 0x2f, 0x26,
	0x38, 0x7e, 0x8d, 0x0f, 0xf6, 0x37, 0xb0, 0x31, 0xe7, 0x1b, 0x65, 0xb0, 0x0b, 0xcd, 0xb8, 0x28,
	0x50, 0xcf, 0x7f, 0xfb, 0x95, 0x98, 0x72, 0x26, 0xbf, 0xb1, 0xf7, 0xc0, 0x54, 0xe2, 0xde, 0x6b,
	0x23, 0xb2, 0x0e, 0x55, 0x19, 0xc3, 0x07, 0x9e, 0x0a, 0x87, 0xa2, 0xec, 0x3b, 0xb0, 0x52, 0xd0,
	0xa1, 0xbc, 0xbb, 0x0a, 0xad, 0xa2, 0xa5, 0x5c, 0xd9, 0x14, 0xd7, 0xbe, 0x0e, 0xe6, 0x23, 0xc6,
	0x07, 0x7e, 0x38, 0x99, 0x12, 0x65, 0x48, 0x9b, 0x30, 0xf4, 0x3e, 0x34, 0x1e, 0x84, 0xc7, 0xd1,
	0xeb, 0xa2, 0xf6, 0xab, 0x06, 0x7a, 0x97, 0xf2, 0x6c, 0x26, 0x69, 0x79, 0x01, 0xae, 0x41, 0xa5,
	0xc7, 0x69, 0x98, 0xf9, 0x9f, 0x12, 0xb8, 0x6f, 0xc8, 0x81, 0xc3, 0xc7, 0xf9, 0xbe, 0x91, 0x92,
	0x72, 0x48, 0xb0, 0xb3, 0xe1, 0xc3, 0x28, 0x14, 0x27, 0xd8, 0xc8, 0x9a, 0x4e, 0x4e, 0x63, 0xd9,
	0x9f, 0x0d, 0xbf, 0x66, 0x94, 0x63, 0x13, 0x6b, 0x3a, 0x19, 0x99, 0xef, 0x0b, 0xd5, 0xf3, 0x7d,
	0x41, 0xba, 0x1a, 0x26, 0x83, 0x1e, 0xe3, 0x6a, 0x37, 0x51, 0x14, 0xce, 0xda, 0x91, 0xdb, 0x3d,
	0x61, 0xee, 0xa9, 0x9a, 0x9d, 0x39, 0x6d, 0xbb, 0x50, 0x3d, 0x8a, 0x12, 0xee, 0xb2, 0x99, 0x77,
	0x10, 0xd0, 0x85, 0x9c, 0x0f, 0xe9, 0x33, 0xf0, 0x4c, 0x6e, 0x80, 0x2e, 0xd1, 0x89, 0x4f, 0x98,
	0x57, 0x03, 0x32, 0x20, 0x5f, 0x5c, 0x70, 0xf0, 0xd2, 0x9e, 0x01, 0xd5, 0x18, 0x55, 0xdb, 0xdf,
	0x57, 0xc0, 0xe8, 0x2a, 0x90, 0xe2, 0x7e, 0xe1, 0xe2, 0xe3, 0xf7, 0x68, 0x20, 0x1b, 0x1d, 0xda,
	0x2c, 0x3b, 0x53, 0x5c, 0x8c, 0x58, 0xda, 0xb1, 0xd1, 0x85, 0xb2, 0x93, 0x91, 0x13, 0xbb, 0x43,
	0x79, 0xf1, 0xee, 0x50, 0x99, 0xdc, 0x1d, 0x3a, 0x00, 0x1e, 0x0b, 0xfc, 0xf0, 0x69, 0x22, 0xbb,
	0x51, 0x15, 0x85, 0x05, 0xce, 0xf4, 0xde, 0x57, 0x9b, 0xdd, 0xfb, 0xd6, 0xa0, 0xc2, 0x06, 0xd4,
	0xcf, 0x56, 0x8d, 0x94, 0x50, 0x71, 0x83, 0x3c, 0x6e, 0xb8, 0x77, 0x8c, 0x22, 0xdf, 0x65, 0x87,
	0x9c, 0x1d, 0xfb, 0x67, 0xd8, 0xd4, 0xeb, 0xce, 0x24, 0x73, 0x62, 0xef, 0x58, 0x9a, 0xda, 0x3b,
	0xba, 0x85, 0x16, 0xde, 0xc4, 0x72, 0xbb, 0x36, 0x1b, 0x69, 0x15, 0xce, 0x85, 0xed, 0xfb, 0x16,
	0xd4, 0xd2, 0xe8, 0xc7, 0x6a, 0x0c, 0x5c, 0x9a, 0x2d, 0x59, 0x94, 0x3b, 0xd9, 0xbd, 0xd9, 0x5a,
	0x37, 0xff, 0x7b, 0xad, 0xcb, 0x04, 0x08, 0x7a, 0x26, 0x2b, 0x48, 0x4d, 0x8e, 0x8c, 0x94, 0x73,
	0x54, 0x1d, 0x9f, 0x30, 0xee, 0x1f, 0xfb, 0x2e, 0x6e, 0xf7, 0x6a, 0xff, 0x98, 0x27, 0xfa, 0x7f,
	0x16, 0xe0, 0xb4, 0xc1, 0xb7, 0xcc, 0xe5, 0xdd, 0xbf, 0x75, 0x68, 0xed, 0xa9, 0x2d, 0x94, 0xf1,
	0x91, 0xef, 0x32, 0xf2, 0x15, 0x18, 0xf7, 0x99, 0x90, 0xad, 0x3b, 0x26, 0xeb, 0x33, 0xef, 0xc4,
	0xdf, 0x8d, 0xf6, 0xc6, 0xdc, 0x56, 0x2f, 0x87, 0x82, 0xbd, 0xf1, 0xec, 0xf7, 0x3f, 0x7f, 0x28,
	0xad, 0x92, 0x95, 0x9d, 0xd1, 0xad, 0x1d, 0x25, 0xdd, 0xc1, 0x11, 0x40, 0x9e, 0x69, 0xb0, 0x9e,
	0x36, 0xef, 0x2c, 0x55, 0x9f, 0xf3, 0x68, 0x20, 0x1b, 0x2d, 0xe9, 0xcc, 0x66, 0xb3, 0x38, 0x2c,
	0xda, 0xef, 0x2c, 0x94, 0xa7, 0x6d, 0xcf, 0xbe, 0x86, 0x66, 0xaf, 0xd8, 0x6b, 0x45, 0xb3, 0xdf,
	0xa6, 0x8d, 0xe9, 0xbb, 0xdb, 0xe7, 0x03, 0x84, 0xf8, 0xd0, 0xb8, 0xcf, 0x84, 0x34, 0x8a, 0x19,
	0xb8, 0x3c, 0xa3, 0xb8, 0xd0, 0xe9, 0xe6, 0xbc, 0x33, 0xf3, 0xdc, 0xbe, 0x82, 0x06, 0xdf, 0x22,
	0x1b, 0x45, 0x83, 0xd2, 0x5e, 0x6e, 0x95, 0x0c, 0x60, 0x4d, 0x99, 0x9a, 0x18, 0x24, 0xe4, 0x83,
	0x19, 0xad, 0x8b, 0x06, 0x54, 0xfb, 0xfa, 0xbf, 0xb9, 0xaa, 0x3a, 0xff, 0x13, 0x68, 0xe6, 0xe3,
	0x00, 0x83, 0x7a, 0x65, 0x11, 0x4a, 0xf3, 0x91, 0xd3, 0xb6, 0x5f, 0x75, 0x45, 0xe9, 0x75, 0xe0,
	0x62, 0x3e, 0x29, 0x26, 0x76, 0xd7, 0x59, 0xfd, 0xd3, 0x13, 0xa5, 0xbd, 0x00, 0x40, 0x7b, 0xd6,
	0xf3, 0x17, 0x1d, 0xed, 0xb7, 0x17, 0x1d, 0xed, 0x8f, 0x17, 0x1d, 0xed, 0xc7, 0x97, 0x9d, 0x0b,
	0xbf, 0xbc, 0xec, 0x68, 0xcf, 0x5f, 0x76, 0xb4, 0x5e, 0x15, 0xff, 0x6c, 0x3f, 0xfe, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xe5, 0xeb, 0xef, 0x07, 0x48, 0x0f, 0x00, 0x00,
}
