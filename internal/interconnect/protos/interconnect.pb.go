// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interconnect.proto

/*
	Package evntsrc_interconnect is a generated protocol buffer package.

	It is generated from these files:
		interconnect.proto

	It has these top-level messages:
		ForwardingRequest
*/
package evntsrc_interconnect

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import evntsrc_event "github.com/tcfw/evntsrc/internal/event/protos"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ForwardingRequest struct {
	Event    *evntsrc_event.Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Metadata map[string][]byte    `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ForwardingRequest) Reset()                    { *m = ForwardingRequest{} }
func (m *ForwardingRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardingRequest) ProtoMessage()               {}
func (*ForwardingRequest) Descriptor() ([]byte, []int) { return fileDescriptorInterconnect, []int{0} }

func (m *ForwardingRequest) GetEvent() *evntsrc_event.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ForwardingRequest) GetMetadata() map[string][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (*ForwardingRequest) XXX_MessageName() string {
	return "evntsrc.interconnect.ForwardingRequest"
}
func init() {
	proto.RegisterType((*ForwardingRequest)(nil), "evntsrc.interconnect.ForwardingRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InterconnectService service

type InterconnectServiceClient interface {
	Relay(ctx context.Context, opts ...grpc.CallOption) (InterconnectService_RelayClient, error)
}

type interconnectServiceClient struct {
	cc *grpc.ClientConn
}

func NewInterconnectServiceClient(cc *grpc.ClientConn) InterconnectServiceClient {
	return &interconnectServiceClient{cc}
}

func (c *interconnectServiceClient) Relay(ctx context.Context, opts ...grpc.CallOption) (InterconnectService_RelayClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_InterconnectService_serviceDesc.Streams[0], c.cc, "/evntsrc.interconnect.InterconnectService/Relay", opts...)
	if err != nil {
		return nil, err
	}
	x := &interconnectServiceRelayClient{stream}
	return x, nil
}

type InterconnectService_RelayClient interface {
	Send(*ForwardingRequest) error
	Recv() (*ForwardingRequest, error)
	grpc.ClientStream
}

type interconnectServiceRelayClient struct {
	grpc.ClientStream
}

func (x *interconnectServiceRelayClient) Send(m *ForwardingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *interconnectServiceRelayClient) Recv() (*ForwardingRequest, error) {
	m := new(ForwardingRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InterconnectService service

type InterconnectServiceServer interface {
	Relay(InterconnectService_RelayServer) error
}

func RegisterInterconnectServiceServer(s *grpc.Server, srv InterconnectServiceServer) {
	s.RegisterService(&_InterconnectService_serviceDesc, srv)
}

func _InterconnectService_Relay_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InterconnectServiceServer).Relay(&interconnectServiceRelayServer{stream})
}

type InterconnectService_RelayServer interface {
	Send(*ForwardingRequest) error
	Recv() (*ForwardingRequest, error)
	grpc.ServerStream
}

type interconnectServiceRelayServer struct {
	grpc.ServerStream
}

func (x *interconnectServiceRelayServer) Send(m *ForwardingRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *interconnectServiceRelayServer) Recv() (*ForwardingRequest, error) {
	m := new(ForwardingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _InterconnectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.interconnect.InterconnectService",
	HandlerType: (*InterconnectServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Relay",
			Handler:       _InterconnectService_Relay_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "interconnect.proto",
}

func (m *ForwardingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForwardingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintInterconnect(dAtA, i, uint64(m.Event.Size()))
		n1, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x12
			i++
			v := m.Metadata[k]
			byteSize := 0
			if len(v) > 0 {
				byteSize = 1 + len(v) + sovInterconnect(uint64(len(v)))
			}
			mapSize := 1 + len(k) + sovInterconnect(uint64(len(k))) + byteSize
			i = encodeVarintInterconnect(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintInterconnect(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if len(v) > 0 {
				dAtA[i] = 0x12
				i++
				i = encodeVarintInterconnect(dAtA, i, uint64(len(v)))
				i += copy(dAtA[i:], v)
			}
		}
	}
	return i, nil
}

func encodeVarintInterconnect(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ForwardingRequest) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovInterconnect(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovInterconnect(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovInterconnect(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovInterconnect(uint64(mapEntrySize))
		}
	}
	return n
}

func sovInterconnect(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInterconnect(x uint64) (n int) {
	return sovInterconnect(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ForwardingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterconnect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForwardingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForwardingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterconnect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterconnect
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &evntsrc_event.Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterconnect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterconnect
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInterconnect
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterconnect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInterconnect
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInterconnect
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthInterconnect
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInterconnect(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInterconnect
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterconnect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterconnect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterconnect(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterconnect
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterconnect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterconnect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInterconnect
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInterconnect
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInterconnect(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInterconnect = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterconnect   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("interconnect.proto", fileDescriptorInterconnect) }

var fileDescriptorInterconnect = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0x9d, 0x84, 0x88, 0x6e, 0x14, 0x74, 0x4d, 0x71, 0x5c, 0x71, 0x04, 0x1b, 0x0f, 0xc1,
	0x3d, 0x89, 0x08, 0xfe, 0xe9, 0x84, 0x08, 0x16, 0x16, 0x9e, 0xb5, 0xc5, 0x66, 0x33, 0x39, 0x0f,
	0x93, 0x5d, 0xdd, 0xcc, 0x5d, 0xc8, 0x9b, 0xf8, 0x38, 0x96, 0xe9, 0xf4, 0x11, 0x24, 0x79, 0x11,
	0xc9, 0x6e, 0x94, 0x88, 0x16, 0x69, 0x8e, 0xf9, 0x98, 0xdf, 0x7c, 0xdf, 0x77, 0xcb, 0x78, 0xae,
	0x09, 0xad, 0x32, 0x5a, 0xa3, 0x22, 0xf1, 0x6c, 0x0d, 0x19, 0xde, 0xc0, 0x52, 0xd3, 0xd0, 0x2a,
	0xb1, 0xbc, 0x0b, 0xcf, 0xb3, 0x9c, 0x1e, 0x8b, 0x8e, 0x50, 0x66, 0x90, 0x90, 0xea, 0x8d, 0x92,
	0x05, 0x95, 0x38, 0x4a, 0xcb, 0x7e, 0x82, 0x25, 0x6a, 0x4a, 0x9c, 0xc7, 0xd0, 0x0b, 0x6f, 0x18,
	0x1e, 0x2d, 0x9d, 0x66, 0x26, 0x33, 0x9e, 0xe9, 0x14, 0x3d, 0xa7, 0x9c, 0x70, 0x93, 0xc7, 0xf7,
	0xdf, 0x81, 0xed, 0x5e, 0x1b, 0x3b, 0x92, 0xb6, 0x9b, 0xeb, 0x2c, 0xc5, 0x97, 0x02, 0x87, 0xc4,
	0x0f, 0x59, 0xcd, 0x79, 0x06, 0xd0, 0x84, 0xb8, 0xde, 0x6a, 0x88, 0xef, 0x96, 0x3e, 0xa9, 0x3d,
	0xff, 0xa6, 0x1e, 0xe1, 0x77, 0x6c, 0x63, 0x80, 0x24, 0xbb, 0x92, 0x64, 0x50, 0x69, 0x56, 0xe3,
	0x7a, 0xeb, 0x54, 0xfc, 0xf7, 0x53, 0xe2, 0x4f, 0x8c, 0xb8, 0x5d, 0xdc, 0xb5, 0x35, 0xd9, 0x71,
	0xfa, 0x63, 0x13, 0x5e, 0xb2, 0xed, 0x5f, 0x2b, 0xbe, 0xc3, 0xaa, 0x4f, 0x38, 0x76, 0x6d, 0x36,
	0xd3, 0xf9, 0xc8, 0x1b, 0xac, 0x56, 0xca, 0x7e, 0x81, 0x41, 0xa5, 0x09, 0xf1, 0x56, 0xea, 0xc5,
	0x45, 0xe5, 0x0c, 0x5a, 0xc4, 0xf6, 0x6e, 0x96, 0x62, 0xef, 0xd1, 0x96, 0xb9, 0x42, 0xfe, 0xc0,
	0x6a, 0x29, 0xf6, 0xe5, 0x98, 0x1f, 0xac, 0xd8, 0x2e, 0x5c, 0x15, 0x8c, 0xe1, 0x18, 0xae, 0x82,
	0xc9, 0x34, 0x82, 0x8f, 0x69, 0x04, 0x9f, 0xd3, 0x08, 0x5e, 0x67, 0xd1, 0xda, 0xdb, 0x2c, 0x82,
	0xc9, 0x2c, 0x82, 0xce, 0xba, 0x7b, 0xe8, 0x93, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x86, 0xb5,
	0x2b, 0x52, 0xfe, 0x01, 0x00, 0x00,
}
