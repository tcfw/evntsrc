// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scheduler.proto

/*
	Package evntsrc_ttlscheduler is a generated protocol buffer package.

	It is generated from these files:
		scheduler.proto

	It has these top-level messages:
		Stream
		Node
		Binding
		NodeBindingRequest
		NodeBindingResponse
*/
package evntsrc_ttlscheduler

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Stream struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MsgRate int64 `protobuf:"varint,2,opt,name=msgRate,proto3" json:"msgRate,omitempty"`
}

func (m *Stream) Reset()                    { *m = Stream{} }
func (m *Stream) String() string            { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()               {}
func (*Stream) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{0} }

func (m *Stream) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Stream) GetMsgRate() int64 {
	if m != nil {
		return m.MsgRate
	}
	return 0
}

func (*Stream) XXX_MessageName() string {
	return "evntsrc.ttlscheduler.Stream"
}

type Node struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*Node) XXX_MessageName() string {
	return "evntsrc.ttlscheduler.Node"
}

type Binding struct {
	Stream *Stream `protobuf:"bytes,1,opt,name=stream" json:"stream,omitempty"`
	Node   *Node   `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (m *Binding) Reset()                    { *m = Binding{} }
func (m *Binding) String() string            { return proto.CompactTextString(m) }
func (*Binding) ProtoMessage()               {}
func (*Binding) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{2} }

func (m *Binding) GetStream() *Stream {
	if m != nil {
		return m.Stream
	}
	return nil
}

func (m *Binding) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (*Binding) XXX_MessageName() string {
	return "evntsrc.ttlscheduler.Binding"
}

type NodeBindingRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *NodeBindingRequest) Reset()                    { *m = NodeBindingRequest{} }
func (m *NodeBindingRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeBindingRequest) ProtoMessage()               {}
func (*NodeBindingRequest) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{3} }

func (m *NodeBindingRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (*NodeBindingRequest) XXX_MessageName() string {
	return "evntsrc.ttlscheduler.NodeBindingRequest"
}

type NodeBindingResponse struct {
	Bindings []*Binding `protobuf:"bytes,1,rep,name=bindings" json:"bindings,omitempty"`
}

func (m *NodeBindingResponse) Reset()                    { *m = NodeBindingResponse{} }
func (m *NodeBindingResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeBindingResponse) ProtoMessage()               {}
func (*NodeBindingResponse) Descriptor() ([]byte, []int) { return fileDescriptorScheduler, []int{4} }

func (m *NodeBindingResponse) GetBindings() []*Binding {
	if m != nil {
		return m.Bindings
	}
	return nil
}

func (*NodeBindingResponse) XXX_MessageName() string {
	return "evntsrc.ttlscheduler.NodeBindingResponse"
}
func init() {
	proto.RegisterType((*Stream)(nil), "evntsrc.ttlscheduler.Stream")
	proto.RegisterType((*Node)(nil), "evntsrc.ttlscheduler.Node")
	proto.RegisterType((*Binding)(nil), "evntsrc.ttlscheduler.Binding")
	proto.RegisterType((*NodeBindingRequest)(nil), "evntsrc.ttlscheduler.NodeBindingRequest")
	proto.RegisterType((*NodeBindingResponse)(nil), "evntsrc.ttlscheduler.NodeBindingResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TTLScheduler service

type TTLSchedulerClient interface {
	NodeBindings(ctx context.Context, in *NodeBindingRequest, opts ...grpc.CallOption) (*NodeBindingResponse, error)
}

type tTLSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewTTLSchedulerClient(cc *grpc.ClientConn) TTLSchedulerClient {
	return &tTLSchedulerClient{cc}
}

func (c *tTLSchedulerClient) NodeBindings(ctx context.Context, in *NodeBindingRequest, opts ...grpc.CallOption) (*NodeBindingResponse, error) {
	out := new(NodeBindingResponse)
	err := grpc.Invoke(ctx, "/evntsrc.ttlscheduler.TTLScheduler/NodeBindings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TTLScheduler service

type TTLSchedulerServer interface {
	NodeBindings(context.Context, *NodeBindingRequest) (*NodeBindingResponse, error)
}

func RegisterTTLSchedulerServer(s *grpc.Server, srv TTLSchedulerServer) {
	s.RegisterService(&_TTLScheduler_serviceDesc, srv)
}

func _TTLScheduler_NodeBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TTLSchedulerServer).NodeBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.ttlscheduler.TTLScheduler/NodeBindings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TTLSchedulerServer).NodeBindings(ctx, req.(*NodeBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TTLScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.ttlscheduler.TTLScheduler",
	HandlerType: (*TTLSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeBindings",
			Handler:    _TTLScheduler_NodeBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}

func (m *Stream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintScheduler(dAtA, i, uint64(m.Id))
	}
	if m.MsgRate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScheduler(dAtA, i, uint64(m.MsgRate))
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScheduler(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *Binding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Binding) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stream != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScheduler(dAtA, i, uint64(m.Stream.Size()))
		n1, err := m.Stream.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Node != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintScheduler(dAtA, i, uint64(m.Node.Size()))
		n2, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *NodeBindingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeBindingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScheduler(dAtA, i, uint64(m.Node.Size()))
		n3, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *NodeBindingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeBindingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bindings) > 0 {
		for _, msg := range m.Bindings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintScheduler(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintScheduler(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Stream) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovScheduler(uint64(m.Id))
	}
	if m.MsgRate != 0 {
		n += 1 + sovScheduler(uint64(m.MsgRate))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovScheduler(uint64(l))
	}
	return n
}

func (m *Binding) Size() (n int) {
	var l int
	_ = l
	if m.Stream != nil {
		l = m.Stream.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	return n
}

func (m *NodeBindingRequest) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovScheduler(uint64(l))
	}
	return n
}

func (m *NodeBindingResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Bindings) > 0 {
		for _, e := range m.Bindings {
			l = e.Size()
			n += 1 + l + sovScheduler(uint64(l))
		}
	}
	return n
}

func sovScheduler(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozScheduler(x uint64) (n int) {
	return sovScheduler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgRate", wireType)
			}
			m.MsgRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgRate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Binding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Binding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Binding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stream == nil {
				m.Stream = &Stream{}
			}
			if err := m.Stream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeBindingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeBindingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeBindingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeBindingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeBindingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeBindingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheduler
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bindings = append(m.Bindings, &Binding{})
			if err := m.Bindings[len(m.Bindings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScheduler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScheduler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthScheduler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowScheduler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipScheduler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthScheduler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScheduler   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("scheduler.proto", fileDescriptorScheduler) }

var fileDescriptorScheduler = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xd1, 0x4a, 0xfb, 0x30,
	0x18, 0xc5, 0xff, 0xd9, 0xf6, 0xdf, 0xf4, 0xdb, 0x50, 0x88, 0x22, 0xa5, 0x68, 0x28, 0xbd, 0xaa,
	0x17, 0x66, 0x50, 0xbd, 0xf1, 0x76, 0x78, 0x29, 0x22, 0xd9, 0x5e, 0x60, 0x6d, 0x62, 0x57, 0x58,
	0x9b, 0xd9, 0xa4, 0x3e, 0x8b, 0x8f, 0xe3, 0xe5, 0x2e, 0x7d, 0x04, 0x69, 0x5f, 0x44, 0x9a, 0xae,
	0x65, 0x83, 0x0a, 0xbb, 0xcb, 0xc9, 0x77, 0xce, 0xef, 0x7c, 0x21, 0x70, 0xae, 0xc2, 0x95, 0xe0,
	0xf9, 0x5a, 0x64, 0x74, 0x93, 0x49, 0x2d, 0xf1, 0xa5, 0xf8, 0x48, 0xb5, 0xca, 0x42, 0xaa, 0xf5,
	0xba, 0x9d, 0xd9, 0x77, 0x51, 0xac, 0x57, 0x79, 0x40, 0x43, 0x99, 0x4c, 0x23, 0x19, 0xc9, 0xa9,
	0x31, 0x07, 0xf9, 0x9b, 0x51, 0x46, 0x98, 0x53, 0x0d, 0x71, 0x7d, 0x18, 0xce, 0x75, 0x26, 0x96,
	0x09, 0x3e, 0x83, 0x5e, 0xcc, 0x2d, 0xe4, 0x20, 0xef, 0x3f, 0xeb, 0xc5, 0x1c, 0x5b, 0x30, 0x4a,
	0x54, 0xc4, 0x96, 0x5a, 0x58, 0x3d, 0x07, 0x79, 0x7d, 0xd6, 0x48, 0xf7, 0x0a, 0x06, 0x2f, 0x92,
	0x8b, 0xbd, 0xc4, 0x69, 0x95, 0x70, 0x25, 0x8c, 0x66, 0x71, 0xca, 0xe3, 0x34, 0xc2, 0x0f, 0x30,
	0x54, 0x06, 0x6b, 0xc6, 0x63, 0xff, 0x9a, 0x76, 0x2d, 0x4b, 0xeb, 0x6a, 0xb6, 0xf3, 0x62, 0x0a,
	0x83, 0x54, 0xf2, 0xba, 0x6f, 0xec, 0xdb, 0xdd, 0x99, 0xaa, 0x9a, 0x19, 0x9f, 0xfb, 0x04, 0xb8,
	0x52, 0xbb, 0x52, 0x26, 0xde, 0x73, 0xa1, 0x74, 0x4b, 0x41, 0x47, 0x52, 0x5e, 0xe1, 0xe2, 0x80,
	0xa2, 0x36, 0x32, 0x55, 0x02, 0x3f, 0xc2, 0x49, 0x50, 0x5f, 0x29, 0x0b, 0x39, 0x7d, 0x6f, 0xec,
	0xdf, 0x74, 0xa3, 0x9a, 0x60, 0x6b, 0xf7, 0x15, 0x4c, 0x16, 0x8b, 0xe7, 0x79, 0xe3, 0xc0, 0x21,
	0x4c, 0xf6, 0x1a, 0x14, 0xf6, 0xfe, 0xde, 0xe9, 0xf0, 0x2d, 0xf6, 0xed, 0x11, 0xce, 0x7a, 0xdf,
	0x99, 0xb5, 0x2d, 0x08, 0xfa, 0x2e, 0x08, 0xfa, 0x29, 0x08, 0xfa, 0x2c, 0xc9, 0xbf, 0xaf, 0x92,
	0xa0, 0x6d, 0x49, 0x50, 0x30, 0x34, 0x5f, 0x7d, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x98,
	0x39, 0x25, 0x42, 0x02, 0x00, 0x00,
}
