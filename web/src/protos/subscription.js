/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.evntsrc.billing.Subscription');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.billing.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.billing.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.billing.Subscription.displayName = 'proto.evntsrc.billing.Subscription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.billing.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.billing.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.billing.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.billing.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    billing: jspb.Message.getFieldWithDefault(msg, 2, ""),
    billingcycleanchor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    canceledat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    createdat: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currentperiodends: jspb.Message.getFieldWithDefault(msg, 6, 0),
    currentperiodstarts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    daysuntildue: jspb.Message.getFieldWithDefault(msg, 9, 0),
    discount: jspb.Message.getFieldWithDefault(msg, 10, ""),
    cancelatperiodend: jspb.Message.getFieldWithDefault(msg, 11, false),
    endedat: jspb.Message.getFieldWithDefault(msg, 12, 0),
    id: jspb.Message.getFieldWithDefault(msg, 13, ""),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    plan: jspb.Message.getFieldWithDefault(msg, 17, ""),
    start: jspb.Message.getFieldWithDefault(msg, 19, 0),
    status: jspb.Message.getFieldWithDefault(msg, 20, ""),
    taxpercent: +jspb.Message.getFieldWithDefault(msg, 21, 0.0),
    trialends: jspb.Message.getFieldWithDefault(msg, 22, 0),
    trialstarts: jspb.Message.getFieldWithDefault(msg, 23, 0),
    discountends: jspb.Message.getFieldWithDefault(msg, 24, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.billing.Subscription}
 */
proto.evntsrc.billing.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.billing.Subscription;
  return proto.evntsrc.billing.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.billing.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.billing.Subscription}
 */
proto.evntsrc.billing.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBilling(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBillingcycleanchor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCanceledat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedat(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentperiodends(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentperiodstarts(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDaysuntildue(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDiscount(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCancelatperiodend(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndedat(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 15:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlan(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStart(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTaxpercent(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrialends(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrialstarts(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDiscountends(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.billing.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.billing.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.billing.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.billing.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBilling();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBillingcycleanchor();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCanceledat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getCreatedat();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCurrentperiodends();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCurrentperiodstarts();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getDaysuntildue();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getDiscount();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCancelatperiodend();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getEndedat();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getPlan();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getTaxpercent();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getTrialends();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getTrialstarts();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = message.getDiscountends();
  if (f !== 0) {
    writer.writeInt64(
      24,
      f
    );
  }
};


/**
 * optional string billing = 2;
 * @return {string}
 */
proto.evntsrc.billing.Subscription.prototype.getBilling = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Subscription.prototype.setBilling = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 billingCycleAnchor = 3;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getBillingcycleanchor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setBillingcycleanchor = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 canceledAt = 4;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getCanceledat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setCanceledat = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 createdAt = 5;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getCreatedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setCreatedat = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 currentPeriodEnds = 6;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getCurrentperiodends = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setCurrentperiodends = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 currentPeriodStarts = 7;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getCurrentperiodstarts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setCurrentperiodstarts = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 daysUntilDue = 9;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getDaysuntildue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setDaysuntildue = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string discount = 10;
 * @return {string}
 */
proto.evntsrc.billing.Subscription.prototype.getDiscount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Subscription.prototype.setDiscount = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool cancelAtPeriodEnd = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.billing.Subscription.prototype.getCancelatperiodend = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.evntsrc.billing.Subscription.prototype.setCancelatperiodend = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional int64 endedAt = 12;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getEndedat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setEndedat = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string id = 13;
 * @return {string}
 */
proto.evntsrc.billing.Subscription.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Subscription.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * map<string, string> metadata = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.evntsrc.billing.Subscription.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


proto.evntsrc.billing.Subscription.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


/**
 * optional string plan = 17;
 * @return {string}
 */
proto.evntsrc.billing.Subscription.prototype.getPlan = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Subscription.prototype.setPlan = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional int64 start = 19;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setStart = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string status = 20;
 * @return {string}
 */
proto.evntsrc.billing.Subscription.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Subscription.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional double taxPercent = 21;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getTaxpercent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setTaxpercent = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional int64 trialEnds = 22;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getTrialends = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setTrialends = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int64 trialStarts = 23;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getTrialstarts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setTrialstarts = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int64 discountEnds = 24;
 * @return {number}
 */
proto.evntsrc.billing.Subscription.prototype.getDiscountends = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Subscription.prototype.setDiscountends = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


