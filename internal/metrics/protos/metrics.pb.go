// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metrics.proto

/*
	Package evntsrc_stsmetrics is a generated protocol buffer package.

	It is generated from these files:
		metrics.proto

	It has these top-level messages:
		MetricsCountRequest
		MetricCount
		MetricsCountResponse
*/
package evntsrc_stsmetrics

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MetricsCountRequest_Interval int32

const (
	MetricsCountRequest_min10  MetricsCountRequest_Interval = 0
	MetricsCountRequest_min30  MetricsCountRequest_Interval = 1
	MetricsCountRequest_hour   MetricsCountRequest_Interval = 2
	MetricsCountRequest_hour12 MetricsCountRequest_Interval = 3
	MetricsCountRequest_day    MetricsCountRequest_Interval = 4
	MetricsCountRequest_week   MetricsCountRequest_Interval = 5
	MetricsCountRequest_month  MetricsCountRequest_Interval = 6
)

var MetricsCountRequest_Interval_name = map[int32]string{
	0: "min10",
	1: "min30",
	2: "hour",
	3: "hour12",
	4: "day",
	5: "week",
	6: "month",
}
var MetricsCountRequest_Interval_value = map[string]int32{
	"min10":  0,
	"min30":  1,
	"hour":   2,
	"hour12": 3,
	"day":    4,
	"week":   5,
	"month":  6,
}

func (x MetricsCountRequest_Interval) String() string {
	return proto.EnumName(MetricsCountRequest_Interval_name, int32(x))
}
func (MetricsCountRequest_Interval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetrics, []int{0, 0}
}

type MetricsCountRequest struct {
	Stream   int32                        `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Interval MetricsCountRequest_Interval `protobuf:"varint,2,opt,name=interval,proto3,enum=evntsrc.stsmetrics.MetricsCountRequest_Interval" json:"interval,omitempty"`
}

func (m *MetricsCountRequest) Reset()                    { *m = MetricsCountRequest{} }
func (m *MetricsCountRequest) String() string            { return proto.CompactTextString(m) }
func (*MetricsCountRequest) ProtoMessage()               {}
func (*MetricsCountRequest) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{0} }

func (m *MetricsCountRequest) GetStream() int32 {
	if m != nil {
		return m.Stream
	}
	return 0
}

func (m *MetricsCountRequest) GetInterval() MetricsCountRequest_Interval {
	if m != nil {
		return m.Interval
	}
	return MetricsCountRequest_min10
}

func (*MetricsCountRequest) XXX_MessageName() string {
	return "evntsrc.stsmetrics.MetricsCountRequest"
}

type MetricCount struct {
	Count     int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Timestamp *MetricCount_Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *MetricCount) Reset()                    { *m = MetricCount{} }
func (m *MetricCount) String() string            { return proto.CompactTextString(m) }
func (*MetricCount) ProtoMessage()               {}
func (*MetricCount) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{1} }

func (m *MetricCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *MetricCount) GetTimestamp() *MetricCount_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (*MetricCount) XXX_MessageName() string {
	return "evntsrc.stsmetrics.MetricCount"
}

type MetricCount_Timestamp struct {
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (m *MetricCount_Timestamp) Reset()                    { *m = MetricCount_Timestamp{} }
func (m *MetricCount_Timestamp) String() string            { return proto.CompactTextString(m) }
func (*MetricCount_Timestamp) ProtoMessage()               {}
func (*MetricCount_Timestamp) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{1, 0} }

func (m *MetricCount_Timestamp) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *MetricCount_Timestamp) GetNanos() int32 {
	if m != nil {
		return m.Nanos
	}
	return 0
}

func (*MetricCount_Timestamp) XXX_MessageName() string {
	return "evntsrc.stsmetrics.MetricCount.Timestamp"
}

type MetricsCountResponse struct {
	Metrics []*MetricCount `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *MetricsCountResponse) Reset()                    { *m = MetricsCountResponse{} }
func (m *MetricsCountResponse) String() string            { return proto.CompactTextString(m) }
func (*MetricsCountResponse) ProtoMessage()               {}
func (*MetricsCountResponse) Descriptor() ([]byte, []int) { return fileDescriptorMetrics, []int{2} }

func (m *MetricsCountResponse) GetMetrics() []*MetricCount {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (*MetricsCountResponse) XXX_MessageName() string {
	return "evntsrc.stsmetrics.MetricsCountResponse"
}
func init() {
	proto.RegisterType((*MetricsCountRequest)(nil), "evntsrc.stsmetrics.MetricsCountRequest")
	proto.RegisterType((*MetricCount)(nil), "evntsrc.stsmetrics.MetricCount")
	proto.RegisterType((*MetricCount_Timestamp)(nil), "evntsrc.stsmetrics.MetricCount.Timestamp")
	proto.RegisterType((*MetricsCountResponse)(nil), "evntsrc.stsmetrics.MetricsCountResponse")
	proto.RegisterEnum("evntsrc.stsmetrics.MetricsCountRequest_Interval", MetricsCountRequest_Interval_name, MetricsCountRequest_Interval_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetricsService service

type MetricsServiceClient interface {
	MetricsCount(ctx context.Context, in *MetricsCountRequest, opts ...grpc.CallOption) (*MetricsCountResponse, error)
}

type metricsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricsServiceClient(cc *grpc.ClientConn) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) MetricsCount(ctx context.Context, in *MetricsCountRequest, opts ...grpc.CallOption) (*MetricsCountResponse, error) {
	out := new(MetricsCountResponse)
	err := grpc.Invoke(ctx, "/evntsrc.stsmetrics.MetricsService/MetricsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricsService service

type MetricsServiceServer interface {
	MetricsCount(context.Context, *MetricsCountRequest) (*MetricsCountResponse, error)
}

func RegisterMetricsServiceServer(s *grpc.Server, srv MetricsServiceServer) {
	s.RegisterService(&_MetricsService_serviceDesc, srv)
}

func _MetricsService_MetricsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).MetricsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.stsmetrics.MetricsService/MetricsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).MetricsCount(ctx, req.(*MetricsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.stsmetrics.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MetricsCount",
			Handler:    _MetricsService_MetricsCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}

func (m *MetricsCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsCountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stream != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Stream))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Interval))
	}
	return i, nil
}

func (m *MetricCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricCount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Count))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MetricCount_Timestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricCount_Timestamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Seconds))
	}
	if m.Nanos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetrics(dAtA, i, uint64(m.Nanos))
	}
	return i, nil
}

func (m *MetricsCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsCountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, msg := range m.Metrics {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMetrics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMetrics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MetricsCountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Stream != 0 {
		n += 1 + sovMetrics(uint64(m.Stream))
	}
	if m.Interval != 0 {
		n += 1 + sovMetrics(uint64(m.Interval))
	}
	return n
}

func (m *MetricCount) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMetrics(uint64(m.Count))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovMetrics(uint64(l))
	}
	return n
}

func (m *MetricCount_Timestamp) Size() (n int) {
	var l int
	_ = l
	if m.Seconds != 0 {
		n += 1 + sovMetrics(uint64(m.Seconds))
	}
	if m.Nanos != 0 {
		n += 1 + sovMetrics(uint64(m.Nanos))
	}
	return n
}

func (m *MetricsCountResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovMetrics(uint64(l))
		}
	}
	return n
}

func sovMetrics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetrics(x uint64) (n int) {
	return sovMetrics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MetricsCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (MetricsCountRequest_Interval(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &MetricCount_Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricCount_Timestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			}
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetrics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &MetricCount{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetrics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetrics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetrics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetrics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetrics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetrics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetrics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetrics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetrics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetrics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metrics.proto", fileDescriptorMetrics) }

var fileDescriptorMetrics = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x8e, 0xd3, 0x30,
	0x14, 0x1e, 0xb7, 0x93, 0xfe, 0xbc, 0xc2, 0x28, 0x32, 0x23, 0x14, 0x55, 0x28, 0x54, 0xd9, 0x50,
	0x24, 0xb0, 0xdb, 0x0c, 0x1b, 0xc4, 0x0e, 0x16, 0x08, 0x09, 0x16, 0x84, 0xb9, 0x80, 0x9b, 0x31,
	0xa9, 0xc5, 0xc4, 0x2e, 0xb1, 0x53, 0x84, 0x46, 0xb3, 0xe1, 0x0a, 0x2c, 0xe0, 0x0a, 0x70, 0x0a,
	0x96, 0xb3, 0x04, 0x71, 0x01, 0xd4, 0x72, 0x10, 0x14, 0xdb, 0x19, 0x40, 0x80, 0x86, 0x55, 0xde,
	0x67, 0xbf, 0xef, 0xe7, 0xe5, 0x19, 0x2e, 0x97, 0xdc, 0x54, 0x22, 0xd7, 0x64, 0x55, 0x29, 0xa3,
	0x30, 0xe6, 0x6b, 0x69, 0x74, 0x95, 0x13, 0x6d, 0xb4, 0xbf, 0x19, 0xdf, 0x2e, 0x84, 0x59, 0xd6,
	0x0b, 0x92, 0xab, 0x92, 0x16, 0xaa, 0x50, 0xd4, 0xb6, 0x2e, 0xea, 0xe7, 0x16, 0x59, 0x60, 0x2b,
	0x27, 0x31, 0xbe, 0x56, 0x28, 0x55, 0x1c, 0x73, 0xca, 0x56, 0x82, 0x32, 0x29, 0x95, 0x61, 0x46,
	0x28, 0xe9, 0x0d, 0x92, 0x2f, 0x08, 0xae, 0x3c, 0x71, 0xc2, 0x0f, 0x54, 0x2d, 0x4d, 0xc6, 0x5f,
	0xd6, 0x5c, 0x1b, 0x7c, 0x15, 0x7a, 0xda, 0x54, 0x9c, 0x95, 0x11, 0x9a, 0xa0, 0x69, 0x90, 0x79,
	0x84, 0x1f, 0xc3, 0x40, 0x48, 0xc3, 0xab, 0x35, 0x3b, 0x8e, 0x3a, 0x13, 0x34, 0xdd, 0x4b, 0x67,
	0xe4, 0xcf, 0x8c, 0xe4, 0x2f, 0x92, 0xe4, 0x91, 0xe7, 0x65, 0xe7, 0x0a, 0xc9, 0x21, 0x0c, 0xda,
	0x53, 0x3c, 0x84, 0xa0, 0x14, 0x72, 0x3e, 0x0b, 0x77, 0x7c, 0x79, 0x30, 0x0b, 0x11, 0x1e, 0xc0,
	0xee, 0x52, 0xd5, 0x55, 0xd8, 0xc1, 0x00, 0xbd, 0xa6, 0x9a, 0xa7, 0x61, 0x17, 0xf7, 0xa1, 0x7b,
	0xc4, 0x5e, 0x87, 0xbb, 0xcd, 0xf5, 0x2b, 0xce, 0x5f, 0x84, 0x81, 0xe5, 0x28, 0x69, 0x96, 0x61,
	0x2f, 0xf9, 0x80, 0x60, 0xe4, 0x02, 0x58, 0x7f, 0xbc, 0x0f, 0x41, 0xde, 0x14, 0x7e, 0x14, 0x07,
	0xf0, 0x43, 0x18, 0x1a, 0x51, 0x72, 0x6d, 0x58, 0xb9, 0xb2, 0xa3, 0x8c, 0xd2, 0x9b, 0xff, 0x1e,
	0xc5, 0x2a, 0x91, 0xc3, 0x96, 0x90, 0xfd, 0xe4, 0x8e, 0xef, 0xc1, 0xf0, 0xfc, 0x1c, 0x47, 0xd0,
	0xd7, 0x3c, 0x57, 0xf2, 0x48, 0x5b, 0xb7, 0x6e, 0xd6, 0xc2, 0x26, 0x85, 0x64, 0x52, 0x69, 0xeb,
	0x15, 0x64, 0x0e, 0x24, 0x4f, 0x61, 0xff, 0xf7, 0x7f, 0xa5, 0x57, 0x4a, 0x6a, 0x8e, 0xef, 0x42,
	0xdf, 0x07, 0x88, 0xd0, 0xa4, 0x3b, 0x1d, 0xa5, 0xd7, 0x2f, 0xc8, 0x96, 0xb5, 0xfd, 0xe9, 0x47,
	0x04, 0x7b, 0x5e, 0xf3, 0x19, 0xaf, 0xd6, 0x22, 0xe7, 0xf8, 0x1d, 0x82, 0x4b, 0xbf, 0xda, 0xe0,
	0x1b, 0xff, 0xb9, 0xb4, 0xf1, 0xf4, 0xe2, 0x46, 0x97, 0x38, 0xb9, 0xf3, 0xe6, 0xeb, 0xf7, 0xb7,
	0x1d, 0x82, 0x6f, 0xd1, 0xf5, 0x9c, 0xba, 0xd7, 0x42, 0x4f, 0xdc, 0xf7, 0x94, 0x7a, 0x26, 0x3d,
	0x69, 0x57, 0x7f, 0x4a, 0xed, 0x16, 0xee, 0x47, 0x67, 0x9b, 0x18, 0x7d, 0xde, 0xc4, 0xe8, 0xdb,
	0x26, 0x46, 0xef, 0xb7, 0xf1, 0xce, 0xa7, 0x6d, 0x8c, 0xce, 0xb6, 0x31, 0x5a, 0xf4, 0xec, 0x03,
	0x3d, 0xf8, 0x11, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xfe, 0xf0, 0x37, 0x12, 0x03, 0x00, 0x00,
}
