// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: streamauth.proto

/*
	Package evntsrc_streamauth is a generated protocol buffer package.

	It is generated from these files:
		streamauth.proto

	It has these top-level messages:
		APIPermissions
		Empty
		ListRequest
		GetRequest
		StreamKey
		KSRequest
		KeyList
*/
package evntsrc_streamauth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type APIPermissions struct {
	Publish   bool `protobuf:"varint,1,opt,name=Publish,proto3" json:"Publish,omitempty"`
	Subscribe bool `protobuf:"varint,2,opt,name=Subscribe,proto3" json:"Subscribe,omitempty"`
	Replay    bool `protobuf:"varint,3,opt,name=Replay,proto3" json:"Replay,omitempty"`
}

func (m *APIPermissions) Reset()                    { *m = APIPermissions{} }
func (m *APIPermissions) String() string            { return proto.CompactTextString(m) }
func (*APIPermissions) ProtoMessage()               {}
func (*APIPermissions) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{0} }

func (m *APIPermissions) GetPublish() bool {
	if m != nil {
		return m.Publish
	}
	return false
}

func (m *APIPermissions) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *APIPermissions) GetReplay() bool {
	if m != nil {
		return m.Replay
	}
	return false
}

func (*APIPermissions) XXX_MessageName() string {
	return "evntsrc.streamauth.APIPermissions"
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{1} }

func (*Empty) XXX_MessageName() string {
	return "evntsrc.streamauth.Empty"
}

type ListRequest struct {
	Stream int32 `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{2} }

func (m *ListRequest) GetStream() int32 {
	if m != nil {
		return m.Stream
	}
	return 0
}

func (*ListRequest) XXX_MessageName() string {
	return "evntsrc.streamauth.ListRequest"
}

type GetRequest struct {
	Stream int32  `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{3} }

func (m *GetRequest) GetStream() int32 {
	if m != nil {
		return m.Stream
	}
	return 0
}

func (m *GetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (*GetRequest) XXX_MessageName() string {
	return "evntsrc.streamauth.GetRequest"
}

type StreamKey struct {
	Id                string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Label             string          `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Stream            int32           `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	Key               string          `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Secret            string          `protobuf:"bytes,5,opt,name=secret,proto3" json:"secret,omitempty"`
	RestrictionFilter string          `protobuf:"bytes,6,opt,name=restrictionFilter,proto3" json:"restrictionFilter,omitempty"`
	Permissions       *APIPermissions `protobuf:"bytes,7,opt,name=permissions" json:"permissions,omitempty"`
}

func (m *StreamKey) Reset()                    { *m = StreamKey{} }
func (m *StreamKey) String() string            { return proto.CompactTextString(m) }
func (*StreamKey) ProtoMessage()               {}
func (*StreamKey) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{4} }

func (m *StreamKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StreamKey) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *StreamKey) GetStream() int32 {
	if m != nil {
		return m.Stream
	}
	return 0
}

func (m *StreamKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StreamKey) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *StreamKey) GetRestrictionFilter() string {
	if m != nil {
		return m.RestrictionFilter
	}
	return ""
}

func (m *StreamKey) GetPermissions() *APIPermissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (*StreamKey) XXX_MessageName() string {
	return "evntsrc.streamauth.StreamKey"
}

type KSRequest struct {
	Stream int32  `protobuf:"varint,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Secret string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *KSRequest) Reset()                    { *m = KSRequest{} }
func (m *KSRequest) String() string            { return proto.CompactTextString(m) }
func (*KSRequest) ProtoMessage()               {}
func (*KSRequest) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{5} }

func (m *KSRequest) GetStream() int32 {
	if m != nil {
		return m.Stream
	}
	return 0
}

func (m *KSRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KSRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (*KSRequest) XXX_MessageName() string {
	return "evntsrc.streamauth.KSRequest"
}

type KeyList struct {
	Keys []*StreamKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *KeyList) Reset()                    { *m = KeyList{} }
func (m *KeyList) String() string            { return proto.CompactTextString(m) }
func (*KeyList) ProtoMessage()               {}
func (*KeyList) Descriptor() ([]byte, []int) { return fileDescriptorStreamauth, []int{6} }

func (m *KeyList) GetKeys() []*StreamKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (*KeyList) XXX_MessageName() string {
	return "evntsrc.streamauth.KeyList"
}
func init() {
	proto.RegisterType((*APIPermissions)(nil), "evntsrc.streamauth.APIPermissions")
	proto.RegisterType((*Empty)(nil), "evntsrc.streamauth.Empty")
	proto.RegisterType((*ListRequest)(nil), "evntsrc.streamauth.ListRequest")
	proto.RegisterType((*GetRequest)(nil), "evntsrc.streamauth.GetRequest")
	proto.RegisterType((*StreamKey)(nil), "evntsrc.streamauth.StreamKey")
	proto.RegisterType((*KSRequest)(nil), "evntsrc.streamauth.KSRequest")
	proto.RegisterType((*KeyList)(nil), "evntsrc.streamauth.KeyList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamAuthService service

type StreamAuthServiceClient interface {
	Create(ctx context.Context, in *StreamKey, opts ...grpc.CallOption) (*StreamKey, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*KeyList, error)
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeyList, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StreamKey, error)
	ValidateKeySecret(ctx context.Context, in *KSRequest, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *StreamKey, opts ...grpc.CallOption) (*StreamKey, error)
	Delete(ctx context.Context, in *StreamKey, opts ...grpc.CallOption) (*Empty, error)
}

type streamAuthServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamAuthServiceClient(cc *grpc.ClientConn) StreamAuthServiceClient {
	return &streamAuthServiceClient{cc}
}

func (c *streamAuthServiceClient) Create(ctx context.Context, in *StreamKey, opts ...grpc.CallOption) (*StreamKey, error) {
	out := new(StreamKey)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamAuthServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*KeyList, error) {
	out := new(KeyList)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamAuthServiceClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeyList, error) {
	out := new(KeyList)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamAuthServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*StreamKey, error) {
	out := new(StreamKey)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamAuthServiceClient) ValidateKeySecret(ctx context.Context, in *KSRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/ValidateKeySecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamAuthServiceClient) Update(ctx context.Context, in *StreamKey, opts ...grpc.CallOption) (*StreamKey, error) {
	out := new(StreamKey)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamAuthServiceClient) Delete(ctx context.Context, in *StreamKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/evntsrc.streamauth.StreamAuthService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StreamAuthService service

type StreamAuthServiceServer interface {
	Create(context.Context, *StreamKey) (*StreamKey, error)
	List(context.Context, *ListRequest) (*KeyList, error)
	ListAll(context.Context, *Empty) (*KeyList, error)
	Get(context.Context, *GetRequest) (*StreamKey, error)
	ValidateKeySecret(context.Context, *KSRequest) (*Empty, error)
	Update(context.Context, *StreamKey) (*StreamKey, error)
	Delete(context.Context, *StreamKey) (*Empty, error)
}

func RegisterStreamAuthServiceServer(s *grpc.Server, srv StreamAuthServiceServer) {
	s.RegisterService(&_StreamAuthService_serviceDesc, srv)
}

func _StreamAuthService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).Create(ctx, req.(*StreamKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamAuthService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamAuthService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).ListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamAuthService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamAuthService_ValidateKeySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).ValidateKeySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/ValidateKeySecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).ValidateKeySecret(ctx, req.(*KSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamAuthService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).Update(ctx, req.(*StreamKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamAuthService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamAuthServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.streamauth.StreamAuthService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamAuthServiceServer).Delete(ctx, req.(*StreamKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamAuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.streamauth.StreamAuthService",
	HandlerType: (*StreamAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamAuthService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamAuthService_List_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _StreamAuthService_ListAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamAuthService_Get_Handler,
		},
		{
			MethodName: "ValidateKeySecret",
			Handler:    _StreamAuthService_ValidateKeySecret_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StreamAuthService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StreamAuthService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streamauth.proto",
}

func (m *APIPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIPermissions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Publish {
		dAtA[i] = 0x8
		i++
		if m.Publish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Subscribe {
		dAtA[i] = 0x10
		i++
		if m.Subscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Replay {
		dAtA[i] = 0x18
		i++
		if m.Replay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stream != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(m.Stream))
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stream != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(m.Stream))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *StreamKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Stream != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(m.Stream))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.RestrictionFilter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.RestrictionFilter)))
		i += copy(dAtA[i:], m.RestrictionFilter)
	}
	if m.Permissions != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(m.Permissions.Size()))
		n1, err := m.Permissions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *KSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KSRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stream != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(m.Stream))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStreamauth(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	return i, nil
}

func (m *KeyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStreamauth(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintStreamauth(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *APIPermissions) Size() (n int) {
	var l int
	_ = l
	if m.Publish {
		n += 2
	}
	if m.Subscribe {
		n += 2
	}
	if m.Replay {
		n += 2
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Stream != 0 {
		n += 1 + sovStreamauth(uint64(m.Stream))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Stream != 0 {
		n += 1 + sovStreamauth(uint64(m.Stream))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	return n
}

func (m *StreamKey) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	if m.Stream != 0 {
		n += 1 + sovStreamauth(uint64(m.Stream))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	l = len(m.RestrictionFilter)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovStreamauth(uint64(l))
	}
	return n
}

func (m *KSRequest) Size() (n int) {
	var l int
	_ = l
	if m.Stream != 0 {
		n += 1 + sovStreamauth(uint64(m.Stream))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovStreamauth(uint64(l))
	}
	return n
}

func (m *KeyList) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovStreamauth(uint64(l))
		}
	}
	return n
}

func sovStreamauth(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStreamauth(x uint64) (n int) {
	return sovStreamauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *APIPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Publish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Publish = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribe = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictionFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RestrictionFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &APIPermissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			m.Stream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stream |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStreamauth
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &StreamKey{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStreamauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStreamauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStreamauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStreamauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStreamauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStreamauth
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStreamauth
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStreamauth(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStreamauth = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStreamauth   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("streamauth.proto", fileDescriptorStreamauth) }

var fileDescriptorStreamauth = []byte{
	// 610 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xed, 0x24, 0x4d, 0xf2, 0xe5, 0x46, 0xaa, 0xda, 0xd1, 0x27, 0x30, 0x21, 0xb8, 0xd1, 0x08,
	0xa4, 0xaa, 0x82, 0x58, 0x0d, 0xbb, 0x8a, 0x4d, 0x7f, 0xa0, 0x42, 0x01, 0x51, 0x39, 0x82, 0x2d,
	0xf8, 0xe7, 0x36, 0x99, 0xd6, 0x89, 0x8d, 0x67, 0x5c, 0xc9, 0xaa, 0xba, 0xe1, 0x15, 0xd8, 0xf0,
	0x38, 0xb0, 0xeb, 0x12, 0x89, 0x3d, 0x42, 0x0d, 0x4f, 0xc0, 0x86, 0x2d, 0xf2, 0xd8, 0x34, 0xa9,
	0xea, 0x38, 0x0b, 0x56, 0xf1, 0xb9, 0xf7, 0xe4, 0x9e, 0x73, 0x7f, 0x6c, 0x58, 0x15, 0x32, 0x44,
	0x6b, 0x64, 0x45, 0x72, 0xd8, 0x09, 0x42, 0x5f, 0xfa, 0x94, 0xe2, 0xe9, 0x58, 0x8a, 0xd0, 0xe9,
	0x4c, 0x33, 0xcd, 0x47, 0x03, 0x2e, 0x87, 0x91, 0xdd, 0x71, 0xfc, 0x91, 0x31, 0xf0, 0x07, 0xbe,
	0xa1, 0xa8, 0x76, 0x74, 0xa4, 0x90, 0x02, 0xea, 0x29, 0x2d, 0xd1, 0x6c, 0x0d, 0x7c, 0x7f, 0xe0,
	0xa1, 0x61, 0x05, 0xdc, 0xb0, 0xc6, 0x63, 0x5f, 0x5a, 0x92, 0xfb, 0x63, 0x91, 0x66, 0xd9, 0x3b,
	0x58, 0xd9, 0x39, 0x7c, 0x7e, 0x88, 0xe1, 0x88, 0x0b, 0x91, 0xc4, 0xa9, 0x06, 0xb5, 0xc3, 0xc8,
	0xf6, 0xb8, 0x18, 0x6a, 0xa4, 0x4d, 0x36, 0xfe, 0x33, 0xff, 0x42, 0xda, 0x82, 0x7a, 0x3f, 0xb2,
	0x85, 0x13, 0x72, 0x1b, 0xb5, 0x92, 0xca, 0x4d, 0x03, 0xf4, 0x16, 0x54, 0x4d, 0x0c, 0x3c, 0x2b,
	0xd6, 0xca, 0x2a, 0x95, 0x21, 0x56, 0x83, 0xca, 0xd3, 0x51, 0x20, 0x63, 0xf6, 0x00, 0x1a, 0x2f,
	0xb8, 0x90, 0x26, 0xbe, 0x8f, 0x50, 0xc8, 0x84, 0x9f, 0x36, 0xa5, 0x64, 0x2a, 0x66, 0x86, 0xd8,
	0x3e, 0xc0, 0x01, 0x2e, 0x62, 0x51, 0x1d, 0x4a, 0xdc, 0x55, 0x26, 0xea, 0xbb, 0x2b, 0xbf, 0xbe,
	0xaf, 0x83, 0x2d, 0xfc, 0xf1, 0x36, 0x7b, 0xcb, 0x5d, 0x66, 0x96, 0xb8, 0xcb, 0x7e, 0x13, 0xa8,
	0xf7, 0x15, 0xb5, 0x87, 0x71, 0xc6, 0x26, 0xf3, 0xd8, 0xf4, 0x7f, 0xa8, 0x78, 0x96, 0x8d, 0x5e,
	0x5a, 0xd0, 0x4c, 0xc1, 0x8c, 0x76, 0xf9, 0x9a, 0xf6, 0x2a, 0x94, 0x4f, 0x30, 0xd6, 0x96, 0x15,
	0x37, 0x79, 0x54, 0x4c, 0x74, 0x42, 0x94, 0x5a, 0x45, 0x05, 0x33, 0x44, 0x1f, 0xc2, 0x5a, 0x88,
	0x42, 0x86, 0xdc, 0x49, 0x66, 0xfe, 0x8c, 0x7b, 0x12, 0x43, 0xad, 0xaa, 0x28, 0x37, 0x13, 0x74,
	0x1f, 0x1a, 0xc1, 0x74, 0x11, 0x5a, 0xad, 0x4d, 0x36, 0x1a, 0x5d, 0xd6, 0xb9, 0x79, 0x02, 0x9d,
	0xeb, 0x2b, 0x33, 0x67, 0xff, 0xc6, 0x5e, 0x42, 0xbd, 0xd7, 0x5f, 0x34, 0xbe, 0xac, 0x85, 0x52,
	0x5e, 0x0b, 0xe5, 0xd9, 0x16, 0xd8, 0x13, 0xa8, 0xf5, 0x30, 0x4e, 0x16, 0x47, 0xb7, 0x60, 0xf9,
	0x04, 0x63, 0xa1, 0x91, 0x76, 0x79, 0xa3, 0xd1, 0xbd, 0x97, 0x67, 0xec, 0x6a, 0xe4, 0xa6, 0xa2,
	0x76, 0xbf, 0x54, 0x60, 0x2d, 0x8d, 0xed, 0x44, 0x72, 0xd8, 0xc7, 0xf0, 0x94, 0x3b, 0x48, 0x8f,
	0xa1, 0xba, 0x17, 0xa2, 0x25, 0x91, 0x16, 0x17, 0x69, 0x16, 0xa7, 0x19, 0xfb, 0xf0, 0xed, 0xe7,
	0xc7, 0x52, 0x8b, 0xdd, 0x36, 0x4e, 0xb7, 0x8c, 0x94, 0x61, 0x9c, 0xa5, 0xbf, 0xe7, 0xc6, 0x09,
	0xc6, 0xdb, 0x64, 0x93, 0x1e, 0xc1, 0xb2, 0x32, 0xbf, 0x9e, 0x57, 0x6a, 0xe6, 0x1e, 0x9b, 0x77,
	0xf3, 0x08, 0x59, 0xeb, 0xac, 0xad, 0x94, 0x9a, 0x54, 0x9b, 0xa3, 0x24, 0xe8, 0x1e, 0xd4, 0x12,
	0xe6, 0x8e, 0xe7, 0xd1, 0x3b, 0x79, 0x95, 0xd4, 0x3b, 0x50, 0x2c, 0xb2, 0x44, 0x8f, 0xa1, 0x7c,
	0x80, 0x92, 0xea, 0x79, 0xac, 0xe9, 0x4b, 0xb1, 0x68, 0x2c, 0xf7, 0x95, 0x59, 0x9d, 0xb6, 0xe6,
	0x98, 0x35, 0xce, 0xb8, 0x7b, 0x4e, 0x5f, 0xc1, 0xda, 0x1b, 0xcb, 0xe3, 0xae, 0x25, 0xb1, 0x87,
	0x71, 0x3f, 0x3d, 0xd8, 0xdc, 0xca, 0x57, 0xe7, 0xd4, 0x9c, 0xdf, 0x19, 0x5b, 0xa2, 0x1e, 0x54,
	0x5f, 0x07, 0xee, 0xbf, 0x6f, 0x35, 0xb3, 0xdf, 0x2d, 0xb6, 0x3f, 0x84, 0xea, 0x3e, 0x7a, 0xb8,
	0x58, 0xad, 0xc0, 0x73, 0xa6, 0xb4, 0x59, 0xa8, 0xb4, 0xab, 0x5d, 0x5c, 0xea, 0xe4, 0xeb, 0xa5,
	0x4e, 0x7e, 0x5c, 0xea, 0xe4, 0xd3, 0x44, 0x5f, 0xfa, 0x3c, 0xd1, 0xc9, 0xc5, 0x44, 0x27, 0x76,
	0x55, 0x7d, 0x43, 0x1f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x58, 0xde, 0x5f, 0xb8, 0x05,
	0x00, 0x00,
}
