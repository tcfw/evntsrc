/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.evntsrc.billing.Plan');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');
goog.require('proto.evntsrc.billing.Product');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.billing.Plan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.billing.Plan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.billing.Plan.displayName = 'proto.evntsrc.billing.Plan';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.billing.Plan.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.billing.Plan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.billing.Plan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.billing.Plan.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getFieldWithDefault(msg, 1, false),
    aggregateusage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    billingscheme: jspb.Message.getFieldWithDefault(msg, 4, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    deleted: jspb.Message.getFieldWithDefault(msg, 7, false),
    id: jspb.Message.getFieldWithDefault(msg, 8, ""),
    interval: jspb.Message.getFieldWithDefault(msg, 9, ""),
    intervalcount: jspb.Message.getFieldWithDefault(msg, 10, 0),
    livemode: jspb.Message.getFieldWithDefault(msg, 11, false),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : [],
    nickname: jspb.Message.getFieldWithDefault(msg, 13, ""),
    product: (f = msg.getProduct()) && proto.evntsrc.billing.Product.toObject(includeInstance, f),
    tiresmode: jspb.Message.getFieldWithDefault(msg, 15, ""),
    trialperioddays: jspb.Message.getFieldWithDefault(msg, 17, 0),
    usagetype: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.billing.Plan}
 */
proto.evntsrc.billing.Plan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.billing.Plan;
  return proto.evntsrc.billing.Plan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.billing.Plan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.billing.Plan}
 */
proto.evntsrc.billing.Plan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregateusage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingscheme(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterval(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntervalcount(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLivemode(value);
      break;
    case 12:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 14:
      var value = new proto.evntsrc.billing.Product;
      reader.readMessage(value,proto.evntsrc.billing.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setTiresmode(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrialperioddays(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.billing.Plan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.billing.Plan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.billing.Plan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.billing.Plan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAggregateusage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBillingscheme();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInterval();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIntervalcount();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getLivemode();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.evntsrc.billing.Product.serializeBinaryToWriter
    );
  }
  f = message.getTiresmode();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTrialperioddays();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getUsagetype();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.billing.Plan.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.evntsrc.billing.Plan.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string aggregateUsage = 2;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getAggregateusage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setAggregateusage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.evntsrc.billing.Plan.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Plan.prototype.setAmount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string billingScheme = 4;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getBillingscheme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setBillingscheme = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setCurrency = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool deleted = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.billing.Plan.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.evntsrc.billing.Plan.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string id = 8;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string interval = 9;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getInterval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setInterval = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 intervalCount = 10;
 * @return {number}
 */
proto.evntsrc.billing.Plan.prototype.getIntervalcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Plan.prototype.setIntervalcount = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bool liveMode = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.billing.Plan.prototype.getLivemode = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.evntsrc.billing.Plan.prototype.setLivemode = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * map<string, string> metadata = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.evntsrc.billing.Plan.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


proto.evntsrc.billing.Plan.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
};


/**
 * optional string nickname = 13;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setNickname = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional Product product = 14;
 * @return {?proto.evntsrc.billing.Product}
 */
proto.evntsrc.billing.Plan.prototype.getProduct = function() {
  return /** @type{?proto.evntsrc.billing.Product} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.billing.Product, 14));
};


/** @param {?proto.evntsrc.billing.Product|undefined} value */
proto.evntsrc.billing.Plan.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.evntsrc.billing.Plan.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.billing.Plan.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string tiresMode = 15;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getTiresmode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setTiresmode = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 trialPeriodDays = 17;
 * @return {number}
 */
proto.evntsrc.billing.Plan.prototype.getTrialperioddays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.evntsrc.billing.Plan.prototype.setTrialperioddays = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string usageType = 18;
 * @return {string}
 */
proto.evntsrc.billing.Plan.prototype.getUsagetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.evntsrc.billing.Plan.prototype.setUsagetype = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


