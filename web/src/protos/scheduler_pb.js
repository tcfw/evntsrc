/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.exportSymbol('proto.evntsrc.ttlscheduler.Binding', null, global);
goog.exportSymbol('proto.evntsrc.ttlscheduler.Node', null, global);
goog.exportSymbol('proto.evntsrc.ttlscheduler.NodeBindingRequest', null, global);
goog.exportSymbol('proto.evntsrc.ttlscheduler.NodeBindingResponse', null, global);
goog.exportSymbol('proto.evntsrc.ttlscheduler.Stream', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.ttlscheduler.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.ttlscheduler.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.ttlscheduler.Stream.displayName = 'proto.evntsrc.ttlscheduler.Stream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.ttlscheduler.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.ttlscheduler.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.ttlscheduler.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgrate: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.ttlscheduler.Stream}
 */
proto.evntsrc.ttlscheduler.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.ttlscheduler.Stream;
  return proto.evntsrc.ttlscheduler.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.ttlscheduler.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.ttlscheduler.Stream}
 */
proto.evntsrc.ttlscheduler.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsgrate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.ttlscheduler.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.ttlscheduler.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.ttlscheduler.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMsgrate();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.evntsrc.ttlscheduler.Stream.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.evntsrc.ttlscheduler.Stream.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 msgRate = 2;
 * @return {number}
 */
proto.evntsrc.ttlscheduler.Stream.prototype.getMsgrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.evntsrc.ttlscheduler.Stream.prototype.setMsgrate = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.ttlscheduler.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.ttlscheduler.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.ttlscheduler.Node.displayName = 'proto.evntsrc.ttlscheduler.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.ttlscheduler.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.ttlscheduler.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.ttlscheduler.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.ttlscheduler.Node}
 */
proto.evntsrc.ttlscheduler.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.ttlscheduler.Node;
  return proto.evntsrc.ttlscheduler.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.ttlscheduler.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.ttlscheduler.Node}
 */
proto.evntsrc.ttlscheduler.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.ttlscheduler.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.ttlscheduler.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.ttlscheduler.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.evntsrc.ttlscheduler.Node.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.ttlscheduler.Node.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.ttlscheduler.Binding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.ttlscheduler.Binding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.ttlscheduler.Binding.displayName = 'proto.evntsrc.ttlscheduler.Binding';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.ttlscheduler.Binding.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.ttlscheduler.Binding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.ttlscheduler.Binding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.Binding.toObject = function(includeInstance, msg) {
  var f, obj = {
    stream: (f = msg.getStream()) && proto.evntsrc.ttlscheduler.Stream.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.evntsrc.ttlscheduler.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.ttlscheduler.Binding}
 */
proto.evntsrc.ttlscheduler.Binding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.ttlscheduler.Binding;
  return proto.evntsrc.ttlscheduler.Binding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.ttlscheduler.Binding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.ttlscheduler.Binding}
 */
proto.evntsrc.ttlscheduler.Binding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.evntsrc.ttlscheduler.Stream;
      reader.readMessage(value,proto.evntsrc.ttlscheduler.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    case 2:
      var value = new proto.evntsrc.ttlscheduler.Node;
      reader.readMessage(value,proto.evntsrc.ttlscheduler.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.ttlscheduler.Binding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.ttlscheduler.Binding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.ttlscheduler.Binding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.Binding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.evntsrc.ttlscheduler.Stream.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.evntsrc.ttlscheduler.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stream stream = 1;
 * @return {?proto.evntsrc.ttlscheduler.Stream}
 */
proto.evntsrc.ttlscheduler.Binding.prototype.getStream = function() {
  return /** @type{?proto.evntsrc.ttlscheduler.Stream} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.ttlscheduler.Stream, 1));
};


/** @param {?proto.evntsrc.ttlscheduler.Stream|undefined} value */
proto.evntsrc.ttlscheduler.Binding.prototype.setStream = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.evntsrc.ttlscheduler.Binding.prototype.clearStream = function() {
  this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.ttlscheduler.Binding.prototype.hasStream = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Node node = 2;
 * @return {?proto.evntsrc.ttlscheduler.Node}
 */
proto.evntsrc.ttlscheduler.Binding.prototype.getNode = function() {
  return /** @type{?proto.evntsrc.ttlscheduler.Node} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.ttlscheduler.Node, 2));
};


/** @param {?proto.evntsrc.ttlscheduler.Node|undefined} value */
proto.evntsrc.ttlscheduler.Binding.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.evntsrc.ttlscheduler.Binding.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.ttlscheduler.Binding.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.ttlscheduler.NodeBindingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.ttlscheduler.NodeBindingRequest.displayName = 'proto.evntsrc.ttlscheduler.NodeBindingRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.ttlscheduler.NodeBindingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.ttlscheduler.NodeBindingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.evntsrc.ttlscheduler.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.ttlscheduler.NodeBindingRequest}
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.ttlscheduler.NodeBindingRequest;
  return proto.evntsrc.ttlscheduler.NodeBindingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.ttlscheduler.NodeBindingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.ttlscheduler.NodeBindingRequest}
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.evntsrc.ttlscheduler.Node;
      reader.readMessage(value,proto.evntsrc.ttlscheduler.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.ttlscheduler.NodeBindingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.ttlscheduler.NodeBindingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.evntsrc.ttlscheduler.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node node = 1;
 * @return {?proto.evntsrc.ttlscheduler.Node}
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.prototype.getNode = function() {
  return /** @type{?proto.evntsrc.ttlscheduler.Node} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.ttlscheduler.Node, 1));
};


/** @param {?proto.evntsrc.ttlscheduler.Node|undefined} value */
proto.evntsrc.ttlscheduler.NodeBindingRequest.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.evntsrc.ttlscheduler.NodeBindingRequest.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.ttlscheduler.NodeBindingRequest.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.evntsrc.ttlscheduler.NodeBindingResponse.repeatedFields_, null);
};
goog.inherits(proto.evntsrc.ttlscheduler.NodeBindingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.ttlscheduler.NodeBindingResponse.displayName = 'proto.evntsrc.ttlscheduler.NodeBindingResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.ttlscheduler.NodeBindingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.ttlscheduler.NodeBindingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    bindingsList: jspb.Message.toObjectList(msg.getBindingsList(),
    proto.evntsrc.ttlscheduler.Binding.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.ttlscheduler.NodeBindingResponse}
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.ttlscheduler.NodeBindingResponse;
  return proto.evntsrc.ttlscheduler.NodeBindingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.ttlscheduler.NodeBindingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.ttlscheduler.NodeBindingResponse}
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.evntsrc.ttlscheduler.Binding;
      reader.readMessage(value,proto.evntsrc.ttlscheduler.Binding.deserializeBinaryFromReader);
      msg.addBindings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.ttlscheduler.NodeBindingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.ttlscheduler.NodeBindingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBindingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.evntsrc.ttlscheduler.Binding.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Binding bindings = 1;
 * @return {!Array<!proto.evntsrc.ttlscheduler.Binding>}
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.prototype.getBindingsList = function() {
  return /** @type{!Array<!proto.evntsrc.ttlscheduler.Binding>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.evntsrc.ttlscheduler.Binding, 1));
};


/** @param {!Array<!proto.evntsrc.ttlscheduler.Binding>} value */
proto.evntsrc.ttlscheduler.NodeBindingResponse.prototype.setBindingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.evntsrc.ttlscheduler.Binding=} opt_value
 * @param {number=} opt_index
 * @return {!proto.evntsrc.ttlscheduler.Binding}
 */
proto.evntsrc.ttlscheduler.NodeBindingResponse.prototype.addBindings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.evntsrc.ttlscheduler.Binding, opt_index);
};


proto.evntsrc.ttlscheduler.NodeBindingResponse.prototype.clearBindingsList = function() {
  this.setBindingsList([]);
};


goog.object.extend(exports, proto.evntsrc.ttlscheduler);
