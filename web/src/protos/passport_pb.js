/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('./github.com/gogo/protobuf/gogoproto/gogo_pb.js');
var github_com_gogo_googleapis_google_api_annotations_pb = require('./github.com/gogo/googleapis/google/api/annotations_pb.js');
goog.exportSymbol('proto.evntsrc.passport.AuthRequest', null, global);
goog.exportSymbol('proto.evntsrc.passport.AuthResponse', null, global);
goog.exportSymbol('proto.evntsrc.passport.Empty', null, global);
goog.exportSymbol('proto.evntsrc.passport.MFAResponse', null, global);
goog.exportSymbol('proto.evntsrc.passport.OAuthClientSecretCreds', null, global);
goog.exportSymbol('proto.evntsrc.passport.OAuthCodeCreds', null, global);
goog.exportSymbol('proto.evntsrc.passport.RefreshRequest', null, global);
goog.exportSymbol('proto.evntsrc.passport.Revoke', null, global);
goog.exportSymbol('proto.evntsrc.passport.SocialRequest', null, global);
goog.exportSymbol('proto.evntsrc.passport.Timestamp', null, global);
goog.exportSymbol('proto.evntsrc.passport.Tokens', null, global);
goog.exportSymbol('proto.evntsrc.passport.UserCreds', null, global);
goog.exportSymbol('proto.evntsrc.passport.VerifyTokenRequest', null, global);
goog.exportSymbol('proto.evntsrc.passport.VerifyTokenResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.Timestamp.displayName = 'proto.evntsrc.passport.Timestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.Timestamp}
 */
proto.evntsrc.passport.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.Timestamp;
  return proto.evntsrc.passport.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.Timestamp}
 */
proto.evntsrc.passport.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.evntsrc.passport.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.evntsrc.passport.Timestamp.prototype.setSeconds = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.evntsrc.passport.Timestamp.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.evntsrc.passport.Timestamp.prototype.setNanos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.Tokens = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.Tokens, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.Tokens.displayName = 'proto.evntsrc.passport.Tokens';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.Tokens.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.Tokens.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.Tokens} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Tokens.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenexpire: (f = msg.getTokenexpire()) && proto.evntsrc.passport.Timestamp.toObject(includeInstance, f),
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 3, ""),
    refreshexpire: (f = msg.getRefreshexpire()) && proto.evntsrc.passport.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.Tokens}
 */
proto.evntsrc.passport.Tokens.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.Tokens;
  return proto.evntsrc.passport.Tokens.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.Tokens} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.Tokens}
 */
proto.evntsrc.passport.Tokens.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.evntsrc.passport.Timestamp;
      reader.readMessage(value,proto.evntsrc.passport.Timestamp.deserializeBinaryFromReader);
      msg.setTokenexpire(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    case 4:
      var value = new proto.evntsrc.passport.Timestamp;
      reader.readMessage(value,proto.evntsrc.passport.Timestamp.deserializeBinaryFromReader);
      msg.setRefreshexpire(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.Tokens.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.Tokens.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.Tokens} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Tokens.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenexpire();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.evntsrc.passport.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRefreshexpire();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.evntsrc.passport.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.evntsrc.passport.Tokens.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.Tokens.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Timestamp tokenExpire = 2;
 * @return {?proto.evntsrc.passport.Timestamp}
 */
proto.evntsrc.passport.Tokens.prototype.getTokenexpire = function() {
  return /** @type{?proto.evntsrc.passport.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.Timestamp, 2));
};


/** @param {?proto.evntsrc.passport.Timestamp|undefined} value */
proto.evntsrc.passport.Tokens.prototype.setTokenexpire = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.evntsrc.passport.Tokens.prototype.clearTokenexpire = function() {
  this.setTokenexpire(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.Tokens.prototype.hasTokenexpire = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string refreshToken = 3;
 * @return {string}
 */
proto.evntsrc.passport.Tokens.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.evntsrc.passport.Tokens.prototype.setRefreshtoken = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Timestamp refreshExpire = 4;
 * @return {?proto.evntsrc.passport.Timestamp}
 */
proto.evntsrc.passport.Tokens.prototype.getRefreshexpire = function() {
  return /** @type{?proto.evntsrc.passport.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.Timestamp, 4));
};


/** @param {?proto.evntsrc.passport.Timestamp|undefined} value */
proto.evntsrc.passport.Tokens.prototype.setRefreshexpire = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.evntsrc.passport.Tokens.prototype.clearRefreshexpire = function() {
  this.setRefreshexpire(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.Tokens.prototype.hasRefreshexpire = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.VerifyTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.VerifyTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.VerifyTokenRequest.displayName = 'proto.evntsrc.passport.VerifyTokenRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.VerifyTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.VerifyTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.VerifyTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.VerifyTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.VerifyTokenRequest}
 */
proto.evntsrc.passport.VerifyTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.VerifyTokenRequest;
  return proto.evntsrc.passport.VerifyTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.VerifyTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.VerifyTokenRequest}
 */
proto.evntsrc.passport.VerifyTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.VerifyTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.VerifyTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.VerifyTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.VerifyTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.evntsrc.passport.VerifyTokenRequest.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.VerifyTokenRequest.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.VerifyTokenResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.VerifyTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.VerifyTokenResponse.displayName = 'proto.evntsrc.passport.VerifyTokenResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.VerifyTokenResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.VerifyTokenResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.VerifyTokenResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    valid: jspb.Message.getFieldWithDefault(msg, 1, false),
    revoked: jspb.Message.getFieldWithDefault(msg, 2, false),
    tokenexpire: (f = msg.getTokenexpire()) && proto.evntsrc.passport.Timestamp.toObject(includeInstance, f),
    refreshexpire: (f = msg.getRefreshexpire()) && proto.evntsrc.passport.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.VerifyTokenResponse}
 */
proto.evntsrc.passport.VerifyTokenResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.VerifyTokenResponse;
  return proto.evntsrc.passport.VerifyTokenResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.VerifyTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.VerifyTokenResponse}
 */
proto.evntsrc.passport.VerifyTokenResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRevoked(value);
      break;
    case 3:
      var value = new proto.evntsrc.passport.Timestamp;
      reader.readMessage(value,proto.evntsrc.passport.Timestamp.deserializeBinaryFromReader);
      msg.setTokenexpire(value);
      break;
    case 4:
      var value = new proto.evntsrc.passport.Timestamp;
      reader.readMessage(value,proto.evntsrc.passport.Timestamp.deserializeBinaryFromReader);
      msg.setRefreshexpire(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.VerifyTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.VerifyTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.VerifyTokenResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValid();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRevoked();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTokenexpire();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.evntsrc.passport.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRefreshexpire();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.evntsrc.passport.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool valid = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.evntsrc.passport.VerifyTokenResponse.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool revoked = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.getRevoked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.evntsrc.passport.VerifyTokenResponse.prototype.setRevoked = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Timestamp tokenExpire = 3;
 * @return {?proto.evntsrc.passport.Timestamp}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.getTokenexpire = function() {
  return /** @type{?proto.evntsrc.passport.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.Timestamp, 3));
};


/** @param {?proto.evntsrc.passport.Timestamp|undefined} value */
proto.evntsrc.passport.VerifyTokenResponse.prototype.setTokenexpire = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.evntsrc.passport.VerifyTokenResponse.prototype.clearTokenexpire = function() {
  this.setTokenexpire(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.hasTokenexpire = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Timestamp refreshExpire = 4;
 * @return {?proto.evntsrc.passport.Timestamp}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.getRefreshexpire = function() {
  return /** @type{?proto.evntsrc.passport.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.Timestamp, 4));
};


/** @param {?proto.evntsrc.passport.Timestamp|undefined} value */
proto.evntsrc.passport.VerifyTokenResponse.prototype.setRefreshexpire = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.evntsrc.passport.VerifyTokenResponse.prototype.clearRefreshexpire = function() {
  this.setRefreshexpire(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.VerifyTokenResponse.prototype.hasRefreshexpire = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.UserCreds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.UserCreds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.UserCreds.displayName = 'proto.evntsrc.passport.UserCreds';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.UserCreds.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.UserCreds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.UserCreds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.UserCreds.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mfa: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.UserCreds}
 */
proto.evntsrc.passport.UserCreds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.UserCreds;
  return proto.evntsrc.passport.UserCreds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.UserCreds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.UserCreds}
 */
proto.evntsrc.passport.UserCreds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMfa(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.UserCreds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.UserCreds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.UserCreds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.UserCreds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMfa();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.evntsrc.passport.UserCreds.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.UserCreds.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.evntsrc.passport.UserCreds.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.evntsrc.passport.UserCreds.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string MFA = 3;
 * @return {string}
 */
proto.evntsrc.passport.UserCreds.prototype.getMfa = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.evntsrc.passport.UserCreds.prototype.setMfa = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.OAuthClientSecretCreds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.evntsrc.passport.OAuthClientSecretCreds.repeatedFields_, null);
};
goog.inherits(proto.evntsrc.passport.OAuthClientSecretCreds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.OAuthClientSecretCreds.displayName = 'proto.evntsrc.passport.OAuthClientSecretCreds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.evntsrc.passport.OAuthClientSecretCreds.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.OAuthClientSecretCreds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.OAuthClientSecretCreds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.OAuthClientSecretCreds.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secret: jspb.Message.getFieldWithDefault(msg, 2, ""),
    scopesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.OAuthClientSecretCreds}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.OAuthClientSecretCreds;
  return proto.evntsrc.passport.OAuthClientSecretCreds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.OAuthClientSecretCreds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.OAuthClientSecretCreds}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addScopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.OAuthClientSecretCreds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.OAuthClientSecretCreds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.OAuthClientSecretCreds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getScopesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string secret = 2;
 * @return {string}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.setSecret = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string scopes = 3;
 * @return {!Array<string>}
 */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.getScopesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.setScopesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.evntsrc.passport.OAuthClientSecretCreds.prototype.addScopes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.evntsrc.passport.OAuthClientSecretCreds.prototype.clearScopesList = function() {
  this.setScopesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.OAuthCodeCreds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.OAuthCodeCreds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.OAuthCodeCreds.displayName = 'proto.evntsrc.passport.OAuthCodeCreds';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.OAuthCodeCreds.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.OAuthCodeCreds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.OAuthCodeCreds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.OAuthCodeCreds.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.OAuthCodeCreds}
 */
proto.evntsrc.passport.OAuthCodeCreds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.OAuthCodeCreds;
  return proto.evntsrc.passport.OAuthCodeCreds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.OAuthCodeCreds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.OAuthCodeCreds}
 */
proto.evntsrc.passport.OAuthCodeCreds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.OAuthCodeCreds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.OAuthCodeCreds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.OAuthCodeCreds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.OAuthCodeCreds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.evntsrc.passport.OAuthCodeCreds.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.OAuthCodeCreds.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.AuthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.evntsrc.passport.AuthRequest.oneofGroups_);
};
goog.inherits(proto.evntsrc.passport.AuthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.AuthRequest.displayName = 'proto.evntsrc.passport.AuthRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.evntsrc.passport.AuthRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.evntsrc.passport.AuthRequest.CredsCase = {
  CREDS_NOT_SET: 0,
  USERCREDS: 1,
  OAUTHCLIENTSECRETCREDS: 2,
  OAUTHCODECREDS: 3
};

/**
 * @return {proto.evntsrc.passport.AuthRequest.CredsCase}
 */
proto.evntsrc.passport.AuthRequest.prototype.getCredsCase = function() {
  return /** @type {proto.evntsrc.passport.AuthRequest.CredsCase} */(jspb.Message.computeOneofCase(this, proto.evntsrc.passport.AuthRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.AuthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.AuthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.AuthRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.AuthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usercreds: (f = msg.getUsercreds()) && proto.evntsrc.passport.UserCreds.toObject(includeInstance, f),
    oauthclientsecretcreds: (f = msg.getOauthclientsecretcreds()) && proto.evntsrc.passport.OAuthClientSecretCreds.toObject(includeInstance, f),
    oauthcodecreds: (f = msg.getOauthcodecreds()) && proto.evntsrc.passport.OAuthCodeCreds.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.AuthRequest}
 */
proto.evntsrc.passport.AuthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.AuthRequest;
  return proto.evntsrc.passport.AuthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.AuthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.AuthRequest}
 */
proto.evntsrc.passport.AuthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.evntsrc.passport.UserCreds;
      reader.readMessage(value,proto.evntsrc.passport.UserCreds.deserializeBinaryFromReader);
      msg.setUsercreds(value);
      break;
    case 2:
      var value = new proto.evntsrc.passport.OAuthClientSecretCreds;
      reader.readMessage(value,proto.evntsrc.passport.OAuthClientSecretCreds.deserializeBinaryFromReader);
      msg.setOauthclientsecretcreds(value);
      break;
    case 3:
      var value = new proto.evntsrc.passport.OAuthCodeCreds;
      reader.readMessage(value,proto.evntsrc.passport.OAuthCodeCreds.deserializeBinaryFromReader);
      msg.setOauthcodecreds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.AuthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.AuthRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.AuthRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.AuthRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsercreds();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.evntsrc.passport.UserCreds.serializeBinaryToWriter
    );
  }
  f = message.getOauthclientsecretcreds();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.evntsrc.passport.OAuthClientSecretCreds.serializeBinaryToWriter
    );
  }
  f = message.getOauthcodecreds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.evntsrc.passport.OAuthCodeCreds.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserCreds userCreds = 1;
 * @return {?proto.evntsrc.passport.UserCreds}
 */
proto.evntsrc.passport.AuthRequest.prototype.getUsercreds = function() {
  return /** @type{?proto.evntsrc.passport.UserCreds} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.UserCreds, 1));
};


/** @param {?proto.evntsrc.passport.UserCreds|undefined} value */
proto.evntsrc.passport.AuthRequest.prototype.setUsercreds = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.evntsrc.passport.AuthRequest.oneofGroups_[0], value);
};


proto.evntsrc.passport.AuthRequest.prototype.clearUsercreds = function() {
  this.setUsercreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.AuthRequest.prototype.hasUsercreds = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OAuthClientSecretCreds oauthClientSecretCreds = 2;
 * @return {?proto.evntsrc.passport.OAuthClientSecretCreds}
 */
proto.evntsrc.passport.AuthRequest.prototype.getOauthclientsecretcreds = function() {
  return /** @type{?proto.evntsrc.passport.OAuthClientSecretCreds} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.OAuthClientSecretCreds, 2));
};


/** @param {?proto.evntsrc.passport.OAuthClientSecretCreds|undefined} value */
proto.evntsrc.passport.AuthRequest.prototype.setOauthclientsecretcreds = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.evntsrc.passport.AuthRequest.oneofGroups_[0], value);
};


proto.evntsrc.passport.AuthRequest.prototype.clearOauthclientsecretcreds = function() {
  this.setOauthclientsecretcreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.AuthRequest.prototype.hasOauthclientsecretcreds = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OAuthCodeCreds OAuthCodeCreds = 3;
 * @return {?proto.evntsrc.passport.OAuthCodeCreds}
 */
proto.evntsrc.passport.AuthRequest.prototype.getOauthcodecreds = function() {
  return /** @type{?proto.evntsrc.passport.OAuthCodeCreds} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.OAuthCodeCreds, 3));
};


/** @param {?proto.evntsrc.passport.OAuthCodeCreds|undefined} value */
proto.evntsrc.passport.AuthRequest.prototype.setOauthcodecreds = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.evntsrc.passport.AuthRequest.oneofGroups_[0], value);
};


proto.evntsrc.passport.AuthRequest.prototype.clearOauthcodecreds = function() {
  this.setOauthcodecreds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.AuthRequest.prototype.hasOauthcodecreds = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.AuthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.AuthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.AuthResponse.displayName = 'proto.evntsrc.passport.AuthResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.AuthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.AuthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.AuthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.AuthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false),
    tokens: (f = msg.getTokens()) && proto.evntsrc.passport.Tokens.toObject(includeInstance, f),
    mfaresponse: (f = msg.getMfaresponse()) && proto.evntsrc.passport.MFAResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.AuthResponse}
 */
proto.evntsrc.passport.AuthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.AuthResponse;
  return proto.evntsrc.passport.AuthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.AuthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.AuthResponse}
 */
proto.evntsrc.passport.AuthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = new proto.evntsrc.passport.Tokens;
      reader.readMessage(value,proto.evntsrc.passport.Tokens.deserializeBinaryFromReader);
      msg.setTokens(value);
      break;
    case 3:
      var value = new proto.evntsrc.passport.MFAResponse;
      reader.readMessage(value,proto.evntsrc.passport.MFAResponse.deserializeBinaryFromReader);
      msg.setMfaresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.AuthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.AuthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.AuthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.AuthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTokens();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.evntsrc.passport.Tokens.serializeBinaryToWriter
    );
  }
  f = message.getMfaresponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.evntsrc.passport.MFAResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.evntsrc.passport.AuthResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.evntsrc.passport.AuthResponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional Tokens tokens = 2;
 * @return {?proto.evntsrc.passport.Tokens}
 */
proto.evntsrc.passport.AuthResponse.prototype.getTokens = function() {
  return /** @type{?proto.evntsrc.passport.Tokens} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.Tokens, 2));
};


/** @param {?proto.evntsrc.passport.Tokens|undefined} value */
proto.evntsrc.passport.AuthResponse.prototype.setTokens = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.evntsrc.passport.AuthResponse.prototype.clearTokens = function() {
  this.setTokens(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.AuthResponse.prototype.hasTokens = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MFAResponse MFAResponse = 3;
 * @return {?proto.evntsrc.passport.MFAResponse}
 */
proto.evntsrc.passport.AuthResponse.prototype.getMfaresponse = function() {
  return /** @type{?proto.evntsrc.passport.MFAResponse} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.MFAResponse, 3));
};


/** @param {?proto.evntsrc.passport.MFAResponse|undefined} value */
proto.evntsrc.passport.AuthResponse.prototype.setMfaresponse = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.evntsrc.passport.AuthResponse.prototype.clearMfaresponse = function() {
  this.setMfaresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.AuthResponse.prototype.hasMfaresponse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.MFAResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.MFAResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.MFAResponse.displayName = 'proto.evntsrc.passport.MFAResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.MFAResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.MFAResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.MFAResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.MFAResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    challenge: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.MFAResponse}
 */
proto.evntsrc.passport.MFAResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.MFAResponse;
  return proto.evntsrc.passport.MFAResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.MFAResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.MFAResponse}
 */
proto.evntsrc.passport.MFAResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.MFAResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.MFAResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.MFAResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.MFAResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChallenge();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.evntsrc.passport.MFAResponse.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.MFAResponse.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string challenge = 2;
 * @return {string}
 */
proto.evntsrc.passport.MFAResponse.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.evntsrc.passport.MFAResponse.prototype.setChallenge = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.RefreshRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.RefreshRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.RefreshRequest.displayName = 'proto.evntsrc.passport.RefreshRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.RefreshRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.RefreshRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.RefreshRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.RefreshRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    refreshtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.RefreshRequest}
 */
proto.evntsrc.passport.RefreshRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.RefreshRequest;
  return proto.evntsrc.passport.RefreshRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.RefreshRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.RefreshRequest}
 */
proto.evntsrc.passport.RefreshRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefreshtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.RefreshRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.RefreshRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.RefreshRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.RefreshRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefreshtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string refreshToken = 1;
 * @return {string}
 */
proto.evntsrc.passport.RefreshRequest.prototype.getRefreshtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.RefreshRequest.prototype.setRefreshtoken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.SocialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.SocialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.SocialRequest.displayName = 'proto.evntsrc.passport.SocialRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.SocialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.SocialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.SocialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.SocialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idptokens: (f = msg.getIdptokens()) && proto.evntsrc.passport.Tokens.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.SocialRequest}
 */
proto.evntsrc.passport.SocialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.SocialRequest;
  return proto.evntsrc.passport.SocialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.SocialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.SocialRequest}
 */
proto.evntsrc.passport.SocialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 2:
      var value = new proto.evntsrc.passport.Tokens;
      reader.readMessage(value,proto.evntsrc.passport.Tokens.deserializeBinaryFromReader);
      msg.setIdptokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.SocialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.SocialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.SocialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.SocialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdptokens();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.evntsrc.passport.Tokens.serializeBinaryToWriter
    );
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.evntsrc.passport.SocialRequest.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.SocialRequest.prototype.setProvider = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Tokens idpTokens = 2;
 * @return {?proto.evntsrc.passport.Tokens}
 */
proto.evntsrc.passport.SocialRequest.prototype.getIdptokens = function() {
  return /** @type{?proto.evntsrc.passport.Tokens} */ (
    jspb.Message.getWrapperField(this, proto.evntsrc.passport.Tokens, 2));
};


/** @param {?proto.evntsrc.passport.Tokens|undefined} value */
proto.evntsrc.passport.SocialRequest.prototype.setIdptokens = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.evntsrc.passport.SocialRequest.prototype.clearIdptokens = function() {
  this.setIdptokens(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.evntsrc.passport.SocialRequest.prototype.hasIdptokens = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.Revoke = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.Revoke, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.Revoke.displayName = 'proto.evntsrc.passport.Revoke';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.Revoke.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.Revoke.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.Revoke} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Revoke.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jti: jspb.Message.getFieldWithDefault(msg, 2, ""),
    reason: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.Revoke}
 */
proto.evntsrc.passport.Revoke.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.Revoke;
  return proto.evntsrc.passport.Revoke.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.Revoke} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.Revoke}
 */
proto.evntsrc.passport.Revoke.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJti(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.Revoke.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.Revoke.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.Revoke} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Revoke.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJti();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.evntsrc.passport.Revoke.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.evntsrc.passport.Revoke.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jti = 2;
 * @return {string}
 */
proto.evntsrc.passport.Revoke.prototype.getJti = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.evntsrc.passport.Revoke.prototype.setJti = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.evntsrc.passport.Revoke.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.evntsrc.passport.Revoke.prototype.setReason = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.evntsrc.passport.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.evntsrc.passport.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.evntsrc.passport.Empty.displayName = 'proto.evntsrc.passport.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.evntsrc.passport.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.evntsrc.passport.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.evntsrc.passport.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.evntsrc.passport.Empty}
 */
proto.evntsrc.passport.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.evntsrc.passport.Empty;
  return proto.evntsrc.passport.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.evntsrc.passport.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.evntsrc.passport.Empty}
 */
proto.evntsrc.passport.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.evntsrc.passport.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.evntsrc.passport.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.evntsrc.passport.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.evntsrc.passport.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.evntsrc.passport);
