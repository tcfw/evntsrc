// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: adapter.proto

/*
	Package evntsrc_adapter is a generated protocol buffer package.

	It is generated from these files:
		adapter.proto

	It has these top-level messages:
		Adapter
		ExecuteRequest
		ExecuteResponse
*/
package evntsrc_adapter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import evntsrc_event "github.com/tcfw/evntsrc/internal/event/protos"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Adapter_EngineType int32

const (
	Adapter_V8     Adapter_EngineType = 0
	Adapter_PYTHON Adapter_EngineType = 1
	Adapter_LUA    Adapter_EngineType = 2
)

var Adapter_EngineType_name = map[int32]string{
	0: "V8",
	1: "PYTHON",
	2: "LUA",
}
var Adapter_EngineType_value = map[string]int32{
	"V8":     0,
	"PYTHON": 1,
	"LUA":    2,
}

func (x Adapter_EngineType) String() string {
	return proto.EnumName(Adapter_EngineType_name, int32(x))
}
func (Adapter_EngineType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAdapter, []int{0, 0} }

type Adapter struct {
	ID     string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Label  string             `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Engine Adapter_EngineType `protobuf:"varint,3,opt,name=engine,proto3,enum=evntsrc.adapter.Adapter_EngineType" json:"engine,omitempty"`
	Code   []byte             `protobuf:"bytes,4,opt,name=Code,proto3" json:"Code,omitempty"`
	// Types that are valid to be assigned to Context:
	//	*Adapter_Stream
	//	*Adapter_Subject
	//	*Adapter_EventType
	Context  isAdapter_Context `protobuf_oneof:"context"`
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Adapter) Reset()                    { *m = Adapter{} }
func (m *Adapter) String() string            { return proto.CompactTextString(m) }
func (*Adapter) ProtoMessage()               {}
func (*Adapter) Descriptor() ([]byte, []int) { return fileDescriptorAdapter, []int{0} }

type isAdapter_Context interface {
	isAdapter_Context()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Adapter_Stream struct {
	Stream int32 `protobuf:"varint,5,opt,name=stream,proto3,oneof"`
}
type Adapter_Subject struct {
	Subject string `protobuf:"bytes,6,opt,name=subject,proto3,oneof"`
}
type Adapter_EventType struct {
	EventType string `protobuf:"bytes,7,opt,name=eventType,proto3,oneof"`
}

func (*Adapter_Stream) isAdapter_Context()    {}
func (*Adapter_Subject) isAdapter_Context()   {}
func (*Adapter_EventType) isAdapter_Context() {}

func (m *Adapter) GetContext() isAdapter_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Adapter) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Adapter) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Adapter) GetEngine() Adapter_EngineType {
	if m != nil {
		return m.Engine
	}
	return Adapter_V8
}

func (m *Adapter) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Adapter) GetStream() int32 {
	if x, ok := m.GetContext().(*Adapter_Stream); ok {
		return x.Stream
	}
	return 0
}

func (m *Adapter) GetSubject() string {
	if x, ok := m.GetContext().(*Adapter_Subject); ok {
		return x.Subject
	}
	return ""
}

func (m *Adapter) GetEventType() string {
	if x, ok := m.GetContext().(*Adapter_EventType); ok {
		return x.EventType
	}
	return ""
}

func (m *Adapter) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Adapter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Adapter_OneofMarshaler, _Adapter_OneofUnmarshaler, _Adapter_OneofSizer, []interface{}{
		(*Adapter_Stream)(nil),
		(*Adapter_Subject)(nil),
		(*Adapter_EventType)(nil),
	}
}

func _Adapter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Adapter)
	// context
	switch x := m.Context.(type) {
	case *Adapter_Stream:
		_ = b.EncodeVarint(5<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.Stream))
	case *Adapter_Subject:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Subject)
	case *Adapter_EventType:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.EventType)
	case nil:
	default:
		return fmt.Errorf("Adapter.Context has unexpected type %T", x)
	}
	return nil
}

func _Adapter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Adapter)
	switch tag {
	case 5: // context.stream
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Context = &Adapter_Stream{int32(x)}
		return true, err
	case 6: // context.subject
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Context = &Adapter_Subject{x}
		return true, err
	case 7: // context.eventType
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Context = &Adapter_EventType{x}
		return true, err
	default:
		return false, nil
	}
}

func _Adapter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Adapter)
	// context
	switch x := m.Context.(type) {
	case *Adapter_Stream:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Stream))
	case *Adapter_Subject:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Subject)))
		n += len(x.Subject)
	case *Adapter_EventType:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.EventType)))
		n += len(x.EventType)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func (*Adapter) XXX_MessageName() string {
	return "evntsrc.adapter.Adapter"
}

type ExecuteRequest struct {
	Adapter *Adapter             `protobuf:"bytes,1,opt,name=adapter" json:"adapter,omitempty"`
	Event   *evntsrc_event.Event `protobuf:"bytes,2,opt,name=event" json:"event,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdapter, []int{1} }

func (m *ExecuteRequest) GetAdapter() *Adapter {
	if m != nil {
		return m.Adapter
	}
	return nil
}

func (m *ExecuteRequest) GetEvent() *evntsrc_event.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (*ExecuteRequest) XXX_MessageName() string {
	return "evntsrc.adapter.ExecuteRequest"
}

type ExecuteResponse struct {
	Event *evntsrc_event.Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Log   []string             `protobuf:"bytes,2,rep,name=log" json:"log,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (m *ExecuteResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdapter, []int{2} }

func (m *ExecuteResponse) GetEvent() *evntsrc_event.Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ExecuteResponse) GetLog() []string {
	if m != nil {
		return m.Log
	}
	return nil
}

func (*ExecuteResponse) XXX_MessageName() string {
	return "evntsrc.adapter.ExecuteResponse"
}
func init() {
	proto.RegisterType((*Adapter)(nil), "evntsrc.adapter.Adapter")
	proto.RegisterType((*ExecuteRequest)(nil), "evntsrc.adapter.ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "evntsrc.adapter.ExecuteResponse")
	proto.RegisterEnum("evntsrc.adapter.Adapter_EngineType", Adapter_EngineType_name, Adapter_EngineType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdapterService service

type AdapterServiceClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type adapterServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdapterServiceClient(cc *grpc.ClientConn) AdapterServiceClient {
	return &adapterServiceClient{cc}
}

func (c *adapterServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	out := new(ExecuteResponse)
	err := grpc.Invoke(ctx, "/evntsrc.adapter.AdapterService/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdapterService service

type AdapterServiceServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
}

func RegisterAdapterServiceServer(s *grpc.Server, srv AdapterServiceServer) {
	s.RegisterService(&_AdapterService_serviceDesc, srv)
}

func _AdapterService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evntsrc.adapter.AdapterService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdapterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evntsrc.adapter.AdapterService",
	HandlerType: (*AdapterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _AdapterService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter.proto",
}

func (m *Adapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Adapter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Label) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(len(m.Label)))
		i += copy(dAtA[i:], m.Label)
	}
	if m.Engine != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(m.Engine))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Context != nil {
		nn1, err := m.Context.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if len(m.Metadata) > 0 {
		for k, _ := range m.Metadata {
			dAtA[i] = 0x42
			i++
			v := m.Metadata[k]
			mapSize := 1 + len(k) + sovAdapter(uint64(len(k))) + 1 + len(v) + sovAdapter(uint64(len(v)))
			i = encodeVarintAdapter(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAdapter(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAdapter(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Adapter_Stream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x28
	i++
	i = encodeVarintAdapter(dAtA, i, uint64(m.Stream))
	return i, nil
}
func (m *Adapter_Subject) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x32
	i++
	i = encodeVarintAdapter(dAtA, i, uint64(len(m.Subject)))
	i += copy(dAtA[i:], m.Subject)
	return i, nil
}
func (m *Adapter_EventType) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x3a
	i++
	i = encodeVarintAdapter(dAtA, i, uint64(len(m.EventType)))
	i += copy(dAtA[i:], m.EventType)
	return i, nil
}
func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Adapter != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(m.Adapter.Size()))
		n2, err := m.Adapter.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Event != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(m.Event.Size()))
		n3, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAdapter(dAtA, i, uint64(m.Event.Size()))
		n4, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Log) > 0 {
		for _, s := range m.Log {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintAdapter(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Adapter) Size() (n int) {
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAdapter(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovAdapter(uint64(l))
	}
	if m.Engine != 0 {
		n += 1 + sovAdapter(uint64(m.Engine))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAdapter(uint64(l))
	}
	if m.Context != nil {
		n += m.Context.Size()
	}
	if len(m.Metadata) > 0 {
		for k, v := range m.Metadata {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAdapter(uint64(len(k))) + 1 + len(v) + sovAdapter(uint64(len(v)))
			n += mapEntrySize + 1 + sovAdapter(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Adapter_Stream) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovAdapter(uint64(m.Stream))
	return n
}
func (m *Adapter_Subject) Size() (n int) {
	var l int
	_ = l
	l = len(m.Subject)
	n += 1 + l + sovAdapter(uint64(l))
	return n
}
func (m *Adapter_EventType) Size() (n int) {
	var l int
	_ = l
	l = len(m.EventType)
	n += 1 + l + sovAdapter(uint64(l))
	return n
}
func (m *ExecuteRequest) Size() (n int) {
	var l int
	_ = l
	if m.Adapter != nil {
		l = m.Adapter.Size()
		n += 1 + l + sovAdapter(uint64(l))
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovAdapter(uint64(l))
	}
	return n
}

func (m *ExecuteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovAdapter(uint64(l))
	}
	if len(m.Log) > 0 {
		for _, s := range m.Log {
			l = len(s)
			n += 1 + l + sovAdapter(uint64(l))
		}
	}
	return n
}

func sovAdapter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdapter(x uint64) (n int) {
	return sovAdapter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Adapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdapter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Adapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Adapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Engine", wireType)
			}
			m.Engine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Engine |= (Adapter_EngineType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Context = &Adapter_Stream{v}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = &Adapter_Subject{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = &Adapter_EventType{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAdapter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdapter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAdapter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAdapter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAdapter
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAdapter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAdapter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Metadata[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdapter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdapter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdapter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adapter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Adapter == nil {
				m.Adapter = &Adapter{}
			}
			if err := m.Adapter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &evntsrc_event.Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdapter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdapter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdapter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &evntsrc_event.Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdapter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdapter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdapter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdapter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdapter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdapter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdapter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdapter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdapter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdapter   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("adapter.proto", fileDescriptorAdapter) }

var fileDescriptorAdapter = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xcd, 0xda, 0x8d, 0xdd, 0x4c, 0xbe, 0xa6, 0xd1, 0xaa, 0x87, 0x55, 0x0e, 0xfe, 0x8c, 0x91,
	0x90, 0x41, 0xc2, 0x91, 0xcc, 0xa5, 0xa2, 0xa7, 0x86, 0x46, 0x4a, 0x25, 0x68, 0x91, 0x29, 0x48,
	0xdc, 0xb0, 0x9d, 0xc1, 0x04, 0x1c, 0xaf, 0xb1, 0xd7, 0x51, 0xf3, 0x23, 0xb8, 0xf3, 0x73, 0x38,
	0xf6, 0xc8, 0x4f, 0x40, 0xc9, 0x1f, 0x41, 0x5e, 0x6f, 0x12, 0x15, 0x14, 0x71, 0x89, 0xe6, 0xcd,
	0xbe, 0x37, 0xf3, 0xe6, 0xc5, 0x70, 0x14, 0x4e, 0xc3, 0x5c, 0x60, 0xe1, 0xe5, 0x05, 0x17, 0x9c,
	0x1e, 0xe3, 0x22, 0x13, 0x65, 0x11, 0x7b, 0xaa, 0x3d, 0x78, 0x9a, 0xcc, 0xc4, 0xa7, 0x2a, 0xf2,
	0x62, 0x3e, 0x1f, 0x26, 0x3c, 0xe1, 0x43, 0xc9, 0x8b, 0xaa, 0x8f, 0x12, 0x49, 0x20, 0xab, 0x46,
	0x3f, 0x78, 0x30, 0xcb, 0x04, 0x16, 0x59, 0x98, 0x0e, 0x71, 0x81, 0x99, 0x68, 0xd8, 0x65, 0x03,
	0x1a, 0x8a, 0xf3, 0x4d, 0x07, 0xf3, 0xbc, 0x99, 0x4e, 0x7b, 0xa0, 0x5d, 0x5e, 0x30, 0x62, 0x13,
	0xb7, 0x13, 0x68, 0x97, 0x17, 0xf4, 0x04, 0xda, 0x69, 0x18, 0x61, 0xca, 0x34, 0xd9, 0x6a, 0x00,
	0x3d, 0x03, 0x03, 0xb3, 0x64, 0x96, 0x21, 0xd3, 0x6d, 0xe2, 0xf6, 0xfc, 0x87, 0xde, 0x1f, 0x2e,
	0x3d, 0x35, 0xcf, 0x1b, 0x4b, 0xda, 0xcd, 0x32, 0xc7, 0x40, 0x49, 0x28, 0x85, 0x83, 0x17, 0x7c,
	0x8a, 0xec, 0xc0, 0x26, 0xee, 0x7f, 0x81, 0xac, 0x29, 0x03, 0xa3, 0x14, 0x05, 0x86, 0x73, 0xd6,
	0xb6, 0x89, 0xdb, 0x9e, 0xb4, 0x02, 0x85, 0xe9, 0x00, 0xcc, 0xb2, 0x8a, 0x3e, 0x63, 0x2c, 0x98,
	0x51, 0x5b, 0x98, 0xb4, 0x82, 0x4d, 0x83, 0x5a, 0xd0, 0x91, 0x77, 0xd4, 0xe3, 0x99, 0xa9, 0x5e,
	0x77, 0x2d, 0x3a, 0x82, 0xc3, 0x39, 0x8a, 0x70, 0x1a, 0x8a, 0x90, 0x1d, 0xda, 0xba, 0xdb, 0xf5,
	0x1f, 0xed, 0x35, 0xfa, 0x4a, 0x11, 0xc7, 0x99, 0x28, 0x96, 0xc1, 0x56, 0x37, 0x38, 0x83, 0xa3,
	0x7b, 0x4f, 0xb4, 0x0f, 0xfa, 0x17, 0x5c, 0xaa, 0x88, 0xea, 0xb2, 0xce, 0x68, 0x11, 0xa6, 0x15,
	0x6e, 0x32, 0x92, 0xe0, 0xb9, 0x76, 0x4a, 0x9c, 0xc7, 0x00, 0xbb, 0x00, 0xa8, 0x01, 0xda, 0xbb,
	0xd3, 0x7e, 0x8b, 0x02, 0x18, 0xaf, 0xdf, 0xdf, 0x4c, 0xae, 0xaf, 0xfa, 0x84, 0x9a, 0xa0, 0xbf,
	0x7c, 0x7b, 0xde, 0xd7, 0x46, 0x1d, 0x30, 0x63, 0x9e, 0x09, 0xbc, 0x15, 0x4e, 0x0e, 0xbd, 0xf1,
	0x2d, 0xc6, 0x95, 0xc0, 0x00, 0xbf, 0x56, 0x58, 0x0a, 0xea, 0x83, 0xa9, 0xfc, 0xca, 0xbd, 0x5d,
	0x9f, 0xed, 0xbb, 0x23, 0xd8, 0x10, 0xe9, 0x13, 0x68, 0xcb, 0x24, 0xa4, 0xab, 0xae, 0x7f, 0xb2,
	0x55, 0x34, 0x7f, 0xfd, 0xb8, 0xfe, 0x0d, 0x1a, 0x8a, 0x73, 0x0d, 0xc7, 0xdb, 0x8d, 0x65, 0xce,
	0xb3, 0x12, 0x77, 0x72, 0xf2, 0x4f, 0x79, 0x1d, 0x49, 0xca, 0x13, 0xa6, 0xd9, 0x7a, 0x1d, 0x49,
	0xca, 0x13, 0xff, 0x03, 0xf4, 0x94, 0xa1, 0x37, 0x58, 0x2c, 0x66, 0x31, 0xd2, 0x2b, 0x30, 0xd5,
	0x0a, 0xfa, 0xff, 0x5f, 0xe6, 0xef, 0x9f, 0x3b, 0xb0, 0xf7, 0x13, 0x1a, 0x77, 0x4e, 0x6b, 0xc4,
	0xee, 0x56, 0x16, 0xf9, 0xb9, 0xb2, 0xc8, 0xaf, 0x95, 0x45, 0xbe, 0xaf, 0xad, 0xd6, 0x8f, 0xb5,
	0x45, 0xee, 0xd6, 0x16, 0x89, 0x0c, 0xf9, 0x55, 0x3f, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5d,
	0x2c, 0x21, 0xa4, 0x49, 0x03, 0x00, 0x00,
}
